<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程</title>
      <link href="/2020/04/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/04/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="程序、进程、线程的理解"><a href="#程序、进程、线程的理解" class="headerlink" title="程序、进程、线程的理解"></a>程序、进程、线程的理解</h1><a id="more"></a><ul><li>程序<br>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</li><li>进程<br>概念：程序的一次执行过程，或是正在运行的一个程序。<br>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li><li>线程<br>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。</li><li>进程与线程<br><img src="/.com//%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.png" alt="进程与线程"><br><img src="/.com//jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="jvm内存结构"><br>进程可以细化为多个线程。<br>每个线程，拥有自己独立的：栈、程序计数器<br>多个线程，共享同一个进程中的结构：方法区、堆。      <h1 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h1></li><li>单核CPU与多核CPU的理解<br>① 单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。<br>② 如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）<br>③一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li><li>并行与并发的理解<br>① 并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。<br>②并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事<h1 id="创建多线程的两种方法"><a href="#创建多线程的两种方法" class="headerlink" title="创建多线程的两种方法"></a>创建多线程的两种方法</h1></li><li>方式一：继承Thread类的方式：    </li></ul><p>1.创建一个继承于Thread类的子类<br>2.重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中<br>3.创建Thread类的子类的对象<br>4.通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()<br>说明两个问题：<br>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。<br>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().      </p><ul><li>方式二：实现Runnable接口的方式     </li></ul><p>1.创建一个实现了Runnable接口的类<br>2.实现类去实现Runnable中的抽象方法：run()<br>3.创建实现类的对象<br>4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象<br>5.通过Thread类的对象调用start()     </p><ul><li>两种方式的对比：<br>开发中：优先选择：实现Runnable接口的方式<br>原因：    </li></ul><p>1.实现的方式没类的单继承性的局限性<br>2.实现的方式更适合来处理多个线程共享数据的情况。<br>联系：<br>public class Thread implements Runnable<br>相同点：<br>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。<br> 目前两种方式，要想启动线程，都是调用的Thread类中的start()。</p><h1 id="Thread类中的常用方法"><a href="#Thread类中的常用方法" class="headerlink" title="Thread类中的常用方法"></a>Thread类中的常用方法</h1><ul><li><p>1.start():启动当前线程；调用当前线程的run()</p></li><li><p>2.run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p></li><li><p>3.currentThread():静态方法，返回执行当前代码的线程</p></li><li><p>4.getName():获取当前线程的名字</p></li><li><p>5.setName():设置当前线程的名字</p></li><li><p>6.yield():释放当前cpu的执行权</p></li><li><p>7.join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</p></li><li><p>8.stop():已过时。当执行此方法时，强制结束当前线程。</p></li><li><p>9.sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</p></li><li><p>10.isAlive():判断当前线程是否存活</p></li><li><p>线程的优先级：</p></li><li><p>1.</p></li><li><p>MAX_PRIORITY：10</p></li><li><p>MIN _PRIORITY：1</p></li><li><p>NORM_PRIORITY：5  –&gt;默认优先级</p></li><li><p>2.如何获取和设置当前线程的优先级：</p></li><li><p>getPriority():获取线程的优先级</p></li><li><p>setPriority(int p):设置线程的优先级</p></li><li><p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。     </p></li><li><p>线程通信：wait() / notify() / notifyAll() :此三个方法定义在Object类中的。</p></li><li><p>补充：线程的分类<br>一种是守护线程，一种是用户线程。</p><h1 id="Thread的生命周期"><a href="#Thread的生命周期" class="headerlink" title="Thread的生命周期"></a>Thread的生命周期</h1><p><img src="/.com//%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="现成的生命周期">    </p></li></ul><ul><li>说明：    </li></ul><p>1.生命周期关注两个概念：状态、相应的方法<br>2.关注：状态a–&gt;状态b:哪些方法执行了（回调方法）<br>        某个方法主动调用：状态a–&gt;状态b<br>3.阻塞：临时状态，不可以作为最终状态<br>  死亡：最终状态。     </p><h1 id="线程的同步机制"><a href="#线程的同步机制" class="headerlink" title="线程的同步机制"></a>线程的同步机制</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>例子：创建个窗口卖票，总票数为100张.使用实现Runnable接口的方式</p><ul><li>1.问题：卖票过程中，出现了重票、错票 –&gt;出现了线程的安全问题</li><li>2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</li><li>3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。<h2 id="2-Java解决方案：同步机制"><a href="#2-Java解决方案：同步机制" class="headerlink" title="2.Java解决方案：同步机制"></a>2.Java解决方案：同步机制</h2>在Java中，我们通过同步机制，来解决线程的安全问题。 </li></ul><ul><li>方式一：同步代码块</li></ul><ul><li>synchronized(同步监视器){     </li><li>//需要被同步的代码</li><li>}</li><li>说明：1.操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</li><li>2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</li><li>3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</li><li>要求：多个线程必须要共用同一把锁。</li><li>补充：<br>①在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。<br>②在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</li></ul><ul><li>方式二：同步方法</li></ul><ul><li><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p></li><li><p>关于同步方法的总结：</p></li><li><p>1.同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</p></li><li><p>2.非静态的同步方法，同步监视器是：this<br>静态的同步方法，同步监视器是：当前类本身</p></li></ul><ul><li>方式三：Lock锁  — JDK5.0新增</li></ul><ul><li>1.面试题：synchronized 与 Lock的异同？</li><li>相同：二者都可以解决线程安全问题</li><li>不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</li><li>Lock需要手动的启动同步（lock()，同时结束同步也需要手动的实现（unlock()）</li></ul><p>使用的优先顺序：</p><ul><li>Lock —&gt; 同步代码块（已经进入了方法体，分配了相应资源 ) —&gt; 同步方法（在方法体之外)<h2 id="3-利弊"><a href="#3-利弊" class="headerlink" title="3.利弊"></a>3.利弊</h2>同步的方式，解决了线程的安全问题。—好处<br>操作同步代码时，只能一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</li></ul><h2 id="4-面试题："><a href="#4-面试题：" class="headerlink" title="4.面试题："></a>4.面试题：</h2><ul><li>Java是如何解决线程安全问题的，有几种方式？并对比几种方式的不同</li></ul><ul><li>synchronized和Lock方式解决线程安全问题的对比<h2 id="使用同步机制将单例模式中的懒汉式改写为线程安全的。"><a href="#使用同步机制将单例模式中的懒汉式改写为线程安全的。" class="headerlink" title="使用同步机制将单例模式中的懒汉式改写为线程安全的。"></a>使用同步机制将单例模式中的懒汉式改写为线程安全的。</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Bank&#123;</span><br><span class="line">   <span class="keyword"> private</span> Bank()&#123;&#125;</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Bank<span class="built_in"> instance </span>= null;</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Bank getInstance()&#123;</span><br><span class="line">        //方式一：效率稍差</span><br><span class="line">//        synchronized (Bank.class) &#123;</span><br><span class="line">//            if(instance == null)&#123;</span><br><span class="line">//               <span class="built_in"> instance </span>=<span class="built_in"> new </span>Bank();</span><br><span class="line">//            &#125;</span><br><span class="line">//           <span class="built_in"> return </span>instance;</span><br><span class="line">//        &#125;</span><br><span class="line">        //方式二：效率更高</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line"></span><br><span class="line">            synchronized (Bank.class) &#123;</span><br><span class="line">                if(instance == null)&#123;</span><br><span class="line"></span><br><span class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>Bank();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>面试题：写一个线程安全的单例模式。<br>饿汉式。<br>懒汉式：上面提供的。     <h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2></li><li>1.死锁的理解：<br>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>2.说明：</li></ul><ul><li>1出现死锁后，不会出现异常，不会出现提示，只是所的线程都处于阻塞状态，无法继续</li><li>2我们使用同步时，要避免出现死锁。</li></ul><ul><li>3.举例：<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">    StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line"></span><br><span class="line">                s1.<span class="built_in">append</span>(<span class="string">"a"</span>);</span><br><span class="line">                s2.<span class="built_in">append</span>(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.<span class="built_in">append</span>(<span class="string">"b"</span>);</span><br><span class="line">                    s2.<span class="built_in">append</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.<span class="built_in">println</span>(s1);</span><br><span class="line">                    System.out.<span class="built_in">println</span>(s2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line"></span><br><span class="line">                s1.<span class="built_in">append</span>(<span class="string">"c"</span>);</span><br><span class="line">                s2.<span class="built_in">append</span>(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.<span class="built_in">append</span>(<span class="string">"d"</span>);</span><br><span class="line">                    s2.<span class="built_in">append</span>(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">                    System.out.<span class="built_in">println</span>(s1);</span><br><span class="line">                    System.out.<span class="built_in">println</span>(s2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><h2 id="1-线程通信涉及到的三个方法："><a href="#1-线程通信涉及到的三个方法：" class="headerlink" title="1.线程通信涉及到的三个方法："></a>1.线程通信涉及到的三个方法：</h2></li></ul><ul><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li><li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。<h2 id="2-说明："><a href="#2-说明：" class="headerlink" title="2.说明："></a>2.说明：</h2></li><li>1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li><li>2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</li><li>否则，会出现IllegalMonitorStateException异常</li><li>3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。<h2 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h2>面试题：sleep() 和 wait()的异同？</li><li>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。<h2 id="4-锁的操作："><a href="#4-锁的操作：" class="headerlink" title="4.锁的操作："></a>4.锁的操作：</h2><img src="/.com//%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E6%93%8D%E4%BD%9C.png" alt="释放锁的操作"><br><img src="/.com//%E4%B8%8D%E4%BC%9A%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E6%93%8D%E4%BD%9C.png" alt="不会释放锁的操作"><h1 id="JDK5-0新增线程的创建方方式"><a href="#JDK5-0新增线程的创建方方式" class="headerlink" title="JDK5.0新增线程的创建方方式"></a>JDK5.0新增线程的创建方方式</h1><h2 id="新增方式一：实现Callable接口。-—-JDK-5-0新增"><a href="#新增方式一：实现Callable接口。-—-JDK-5-0新增" class="headerlink" title="新增方式一：实现Callable接口。 — JDK 5.0新增"></a>新增方式一：实现Callable接口。 — JDK 5.0新增</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Object call() throws Exception &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">sum</span> += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object <span class="keyword">sum</span> = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为："</span> + <span class="keyword">sum</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>说明：<ul><li>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</li><li>1.call()可以返回值的。</li><li>2.call()可以抛出异常，被外面的操作捕获，获取异常的信息</li><li>3.Callable是支持泛型的</li></ul></li></ul><h2 id="新增方式二：使用线程池"><a href="#新增方式二：使用线程池" class="headerlink" title="新增方式二：使用线程池"></a>新增方式二：使用线程池</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">NumberThread</span> <span class="symbol">implements</span> <span class="symbol">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">NumberThread1</span> <span class="symbol">implements</span> <span class="symbol">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(new NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(new NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>好处：</li><li>1.提高响应速度（减少了创建新线程的时间）</li><li>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>3.便于线程管理</li><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没任务时最多保持多长时间后会终止<br>面试题：Java中多线程的创建有几种方式？四种</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 线程安全 </tag>
            
            <tag> 线程通信 </tag>
            
            <tag> 线程的同步机制 </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2020/04/22/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/04/22/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中异常的处理"><a href="#Java中异常的处理" class="headerlink" title="Java中异常的处理"></a>Java中异常的处理</h1><a id="more"></a><h2 id="异常概述与异常体系结构"><a href="#异常概述与异常体系结构" class="headerlink" title="异常概述与异常体系结构"></a>异常概述与异常体系结构</h2><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。     </p><ul><li>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。 (开发过程中的语法错误和逻辑错误不是异常) </li><li>Java程序在执行过程中所发生的异常事件可分为两类：<ul><li>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。      </li><li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如：<br> 空指针访问<br> 试图读取不存在的文件<br> 网络连接中断<br> 数组角标越界</li></ul></li><li>对于这些错误，一般有两种解决方法：一是遇到错误就终止程序 的运行。另一种方法是由程序员在编写程序时，就考虑到错误的 检测、错误消息的提示，以及错误的处理。</li><li>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。 比如：除数为0，数组下标越界等<br><img src="/.com//%E7%BC%96%E8%AF%91%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8.png" alt="编译时异常和运行时异常.png">     </li><li>1.运行时异常：<br>是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序 员应该积极避免其出现的异常。  java.lang.RuntimeException类及它的子 类都是运行时异常。<br>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对 程序的可读性和运行效率产生影响</li><li>2.编译时异常<br>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一 般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。<br>对于这类异常，如果程序不处理，可能会带来意想不到的结果。<h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2></li><li>java.lang.RuntimeException      ClassCastException       ArrayIndexOutOfBoundsException       NullPointerException<br>ArithmeticException<br>NumberFormatException<br>InputMismatchException<br>。。。        </li><li>java.io.IOExeption<br>FileNotFoundException<br>EOFException     </li><li>java.lang.ClassNotFoundException </li><li>java.lang.InterruptedException </li><li>java.io.FileNotFoundException</li><li>java.sql.SQLException<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* java.lang.Throwable</span><br><span class="line"> * <span class="string">|----java.lang.Error:一般不编写针对性的代码进行处理</span></span><br><span class="line"> * <span class="string">|----java.lang.Exception：可以进行异常的处理</span></span><br><span class="line"> * <span class="string">|----编译时异常（checked)</span></span><br><span class="line"> * <span class="string">|----IOException</span></span><br><span class="line"> * <span class="string">|----FileNotFoundException</span></span><br><span class="line"> * <span class="string">|----ClassNotFoundException</span></span><br><span class="line"> * <span class="string">|----运行时异常（unchecked,RuntimeException）</span></span><br><span class="line"> * <span class="string">|-----NullPointerException</span></span><br><span class="line"> * <span class="string">|-----ArrayIndexOutOfBoundsException</span></span><br><span class="line"> * <span class="string">|-----ClassCastException</span></span><br><span class="line"> * <span class="string">|-----NumberFormatException</span></span><br><span class="line"> * <span class="string">|-----InputMismatchException</span></span><br><span class="line"> * <span class="string">|-----ArithmeticException</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="异常的处理机制一：try-catch-finally"><a href="#异常的处理机制一：try-catch-finally" class="headerlink" title="异常的处理机制一：try-catch-finally"></a>异常的处理机制一：try-catch-finally</h2></li><li>Java提供的是异常处理的抓抛模型。 </li><li>Java程序的执行过程中如出现异常，会生成一个异常类对象， 该异常对象将被提交给Java运行时系统，这个过程称为抛出 (throw)异常。</li><li>异常对象的生成<br>由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当 前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例 对象并抛出——自动抛出<br>由开发人员手动创建：Exception exception = new ClassCastException();——创 建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样<br><img src="/.com//%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%93%E6%8A%9B%E6%9C%BA%E5%88%B6.png" alt="异常的抓抛机制.png"></li><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用 方法的上层方法。这个过程将一直继续下去，直到异常被处理。 这一过程称为捕获(catch)异常。 </li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运 行终止。</li><li>程序员通常只能处理Exception，而对Error无能为力。</li><li>异常处理是通过try-catch-finally语句实现的。<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try&#123; </span><br><span class="line">    <span class="params">...</span><span class="params">...</span> <span class="comment">//可能产生异常的代码 </span></span><br><span class="line">    &#125;</span><br><span class="line">catch( ExceptionName1 e )&#123;</span><br><span class="line">     <span class="params">...</span><span class="params">...</span> <span class="comment">//当产生ExceptionName1型异常时的处置措施 </span></span><br><span class="line">     &#125; catch( ExceptionName2 e )&#123;</span><br><span class="line">     <span class="params">...</span><span class="params">...</span> <span class="comment">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">     <span class="params">...</span><span class="params">...</span> <span class="comment">//无论是否发生异常，都无条件执行的语句</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li>try<br>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现 异常的代码放在try语句块中。</li><li>catch (Exceptiontype e)<br>在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随 一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</li><li>finally<br>①捕获异常的最后一步是通过finally语句为异常处理提供一个 统一的出口，使得在控制流转到程序的其它部分以前，能够 对程序的状态作统一的管理。<br>②不论在try代码块中是否发生了异常事件，catch语句是否执 行，catch语句是否有异常，catch语句中是否有return， finally块中的语句都会被执行。<br>③finally语句和catch语句是任选的</li><li>体会<ul><li>体会1：使用try-catch-finally处理编译时异常，使得程序在编译时不再报错，但是运行时仍可能博报错<br>相当于我们使用try-catch-finally将一个编译时可能出现的异常，延时到运行时出现。</li><li>体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对编译时异常，我们一定要考虑异常的处理。</li></ul></li></ul><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest1</span> &#123;</span></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span> str = <span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">num = Integer.<span class="built_in">parseInt</span>(str);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"hello-1"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"><span class="comment">// System.out.println("出现数值转换异常了，不要着急~~~~");</span></span><br><span class="line"><span class="comment">// String getMeString();</span></span><br><span class="line"><span class="comment">// System.out.println(e.getMessage());</span></span><br><span class="line"><span class="comment">// ptintStackTrace</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"出现空指针异常了，不要着急~~~"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"出现异常了，不要着急~~~~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(num);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"hello-2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的处理机制二：throws"><a href="#异常的处理机制二：throws" class="headerlink" title="异常的处理机制二：throws"></a>异常的处理机制二：throws</h2><ul><li>声明抛出异常是Java中处理异常的第二种方式<br>① 如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这 种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理， 而由该方法的调用者负责处理。<br>② 在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类      </li><li>声明抛出异常举例： <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(<span class="keyword">String</span> file)</span> throws FileNotFoundException </span>&#123;</span><br><span class="line">     …… <span class="comment">// 读文件的操作可能产生FileNotFoundException类型的异常 FileInputStream fis = new FileInputStream(file); </span></span><br><span class="line">     ..……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>###重写方法声明抛出异常的原则</li><li>重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下， 对methodA()方法的调用-异常的捕获按父类声明的异常处理<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     public void methodA() <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line">          …… </span><br><span class="line">    &#125;  &#125; </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     public void methodA() <span class="keyword">throws</span> <span class="type">FileNotFoundException</span> &#123;</span><br><span class="line">     …… </span><br><span class="line">     &#125;  &#125; </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">B2</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123; </span><br><span class="line">    public void methodA() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;   <span class="comment">//报错</span></span><br><span class="line">     …… </span><br><span class="line">     &#125;  &#125;</span><br></pre></td></tr></table></figure></li><li>案例：<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ExceptionTest2 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">// 把异常抛给main方法中</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method3();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> method3() &#123;</span><br><span class="line"><span class="comment">// 调用方法时处理</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method2();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用方法时抛出异常；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> method2() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// throws + 异常类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> method1() <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line"><span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"hello1.txt"</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>);</span><br><span class="line"><span class="keyword">int</span> data = fis.<span class="keyword">read</span>();</span><br><span class="line"><span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.<span class="keyword">print</span>((<span class="keyword">char</span>) data);</span><br><span class="line">data = fis.<span class="keyword">read</span>();</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"hahaha!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2></li><li>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并 抛出，也可根据需要使用人工创建并抛出。<br>① 首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运 行环境)。<br>IOException e = new IOException();<br>throw e;<br>② 可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将 会产生语法错误：<br>throw new String(“want to throw”);<h2 id="用户自定义抛出异常类"><a href="#用户自定义抛出异常类" class="headerlink" title="用户自定义抛出异常类"></a>用户自定义抛出异常类</h2></li><li>一般地，用户自定义异常类都是RuntimeException的子类。 </li><li>自定义异常类通常需要编写几个重载的构造器。</li><li>自定义异常需要提供serialVersionUID</li><li>自定义的异常通过throw抛出。 </li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。<br>用户自定义异常类MyException，用于描述数据取值范围错误信息。用户 自己的异常类必须继承现有的异常类。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">13465653435L</span>; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idnumber;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, <span class="keyword">int</span> id)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">    <span class="keyword">this</span>.idnumber = id; </span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> idnumber; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>案例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="/.com//%E5%BC%82%E5%B8%B8%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%80%BB%E7%BB%93.png" alt="异常关键字的总结.png">     </li><li><strong>一首小悟结束异常处理</strong><br>世界上最遥远的距离，是我在if里你在else里，似乎一直相伴又永远分离；<br>世界上最痴心的等待，是我当case你是switch，或许永远都选不上自己；<br>世界上最真情的相依，是你在try我在catch。无论你发神马脾气，我都默 默承受，静静处理。到那时，再来期待我们的finally。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
            <tag> throw </tag>
            
            <tag> throws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象-下</title>
      <link href="/2020/04/21/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/"/>
      <url>/2020/04/21/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的编程–下"><a href="#面向对象的编程–下" class="headerlink" title="面向对象的编程–下"></a>面向对象的编程–下</h1><a id="more"></a><h1 id="关键字：static-静态"><a href="#关键字：static-静态" class="headerlink" title="关键字：static(静态)"></a>关键字：static(静态)</h1><h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>当我们在编写一个类的时候，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产生对象，这时系统才会分配内存空间给对象，其方法才可以供外部使用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。例如所有的中国人都有个国家的名称，每一个中国人都共享这个国家名称，不必 在每一中国人的实例中单独的分配一个用于代表国家名称的变量。     </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>1.static：静态的</li><li>2.static可以用来修饰：属性、方法、代码块、内部类</li><li>3.使用static修饰属性：静态变量<ul><li>3.1属性：按受否使用static修饰：又分为：静态属性 VS 非静态属性(实体属性)<br>非静态属性，当我们修改其中一个对象的非静态属性，其他对象中同样的属性不会被修改<br>静态属性：我们创建类的多个对象，多个对象共享一个静态变量，当我们通过某个对象修改静态变量时，会导致其他对象调用此变量时，变量是修改过的</li><li>3.2 static修饰属性的其他说明<br>① 静态变量随着类的加载而加载。可以通过”类.变量”的方式去调用<br>② 静态属性的加载要早于对象的创建<br>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份。存在于方法区的静态域中</li></ul></li></ul><ul><li><p>4.使用static修饰方法：静态方法<br>① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用<br>② 仍然可以通过对象.方法调用<br>③ 静态方法中，只能调用静态的方法或属性非静态的方法中，既可以调用静态的属性或方法，也可调用非静态的</p></li><li><p>5.注意点：</p><ul><li>5.1static中不能使用this关键字、super关键字    </li><li>5.2 关于静态属性和静态方法的使用，大家要从生命周期中去理解    </li></ul></li><li><p>6.开发中，如何确定一个属性是否要声明为static的？<br>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。<br>类中的常量也常常声明为static</p><ul><li>开发中，如何确定一个方法是否要声明为static的？<br>操作静态属性的方法，通常设置为static的<br>工具类中的方法，习惯上声明额为static的，比如Math、Arrays<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>设计模式是在大量的事件中总结和理论化之后优选的代码结构、编码风格、以及解决问题的思考方式。设计模式免去我们自己再思考和摸索。式就像是经典的棋谱，不同的棋局，我们用不同的棋谱<br>所谓的单例模式，就采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且<br>该类只提供一个取得其对象实例的方法。在如果我们要让类在一个虚拟机中只能产生一个对象，我们首先<br>必须将类的构造器的访问权限设置为private 这样，就不能new操作符在类的外部产生类的对象了<br>但是在类的内部仍然可以产生该类的对象。因为在类的外部开始还无法得到该类的对象，只能调用该类<br>的某个静态方法以返回类内部创建的对象，静态方法只能访问类的静态成员变量，所以，指向类内部产生该类对象的变量也必须定义为静态的。</li></ul></li><li><p>1.所谓的类的单例模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。</p></li><li><p>2.如何实现<br>懒汉式  VS   饿汉式<br>饿汉式：坏处：对象加载时间过长<br>好处：线程安全<br>懒汉式：好处：延迟对象的创建<br>坏处：目前的写法线程不安全     </p></li><li><p><img src="/.com//%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.png" alt="静态变量的内存解析"></p></li><li><p>设计如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"><span class="keyword">public</span><span class="keyword"> static</span> void main(String[] args) &#123;</span><br><span class="line">Bank bank =Bank.getInstance();</span><br><span class="line">Bank bank2 =Bank.getInstance();</span><br><span class="line">System.out.println(bank == bank2);</span><br><span class="line">Order order = Order.getInstance();</span><br><span class="line">Order order2 = Order.getInstance();</span><br><span class="line">System.out.println(order == order2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//饿汉式</span><br><span class="line">class Bank&#123;</span><br><span class="line">//1.私有化类的构造器</span><br><span class="line"><span class="keyword">private</span> Bank()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//2.内部创建类的对象</span><br><span class="line"><span class="keyword">private</span><span class="keyword"> static</span> Bank<span class="built_in"> instance </span>=<span class="built_in"> new </span>Bank();</span><br><span class="line">//3.提供公共的静态的方法，返回类的对象</span><br><span class="line"><span class="keyword">public</span><span class="keyword"> static</span> Bank getInstance()&#123;</span><br><span class="line"><span class="built_in">return </span>instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//懒汉式</span><br><span class="line">class Order&#123;</span><br><span class="line">//1. 私有化类的构造器</span><br><span class="line"><span class="keyword">private</span> Order()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//2. 声明当前类对象，没有初始化</span><br><span class="line">//4. 此对象也必须声明为static的</span><br><span class="line"><span class="keyword">private</span><span class="keyword"> static</span> Order<span class="built_in"> instance </span>= null;</span><br><span class="line">//声明public、static的返回当前类对象的方法</span><br><span class="line"><span class="keyword">public</span><span class="keyword"> static</span> Order getInstance()&#123;</span><br><span class="line">if(instance == null)&#123;</span><br><span class="line"><span class="built_in">instance </span>=<span class="built_in"> new </span>Order();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return </span>instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="abstract关键字-抽象性"><a href="#abstract关键字-抽象性" class="headerlink" title="abstract关键字(抽象性)"></a>abstract关键字(抽象性)</h1></li><li><p>1.abstract关键字的使用</p></li><li><p>2.abstract 可以用来修饰的结构：类、方法</p></li><li><p>3.abstract 修饰类：抽象性</p><ul><li>此类不能实例化<br>抽象类中一定有构造器，便于子类实例化时调用(涉及：子类对象实例化的全过程)</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作  </li></ul></li><li><p>4.abstract修饰方法：抽象方法  </p><ul><li>抽象方法只有方法的声明，没有方法体</li><li>包含抽象方法的类一定是抽象类，但抽象类不一定有抽象方法。</li><li>若子类中重写了父类(包括直接父类和间接父类)中中所有的抽象方法后，此子类方可实例化</li><li>若子类中没有重写父类(包括直接父类和间接父类)中的所有的抽象方法，则此子类也是一个抽象类，需要用abstract关键字修饰   </li></ul></li><li><p>5.abstract   使用上的注意点</p><ul><li>1.abstract不能用来修饰：属性、构造器等结构</li><li>2.abstract不能用来修饰私有的方法、静态方法、final的方法、final的类</li></ul></li><li><p>使用案例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AbstractTest</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 定义为类为抽象的，则不可以再被创建对象，但是子类仍可以实例化</span></span><br><span class="line"><span class="comment">// Person p1 = new Person();</span></span><br><span class="line">Man m1 = <span class="keyword">new</span> Man();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">word</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">live</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Person</span> <span class="title">extends</span> <span class="title">word</span> &#123;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">walk</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"人睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Man</span> <span class="title">extends</span> <span class="title">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Man</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">live</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"男人可以建造房子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"男人跑的快"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="final关键字-最终的"><a href="#final关键字-最终的" class="headerlink" title="final关键字(最终的)"></a>final关键字(最终的)</h1></li><li><p>1.final可以用来修饰的结构：类、方法、变量 </p></li><li><p>2.final 用来修饰一个类：此类不能被其他类继承</p><ul><li>比如：String类、System类、StringBuffer类</li></ul></li><li><p>3.final 用来修饰方法，表明此方法不可以被重写</p><ul><li>比如：Object类中getClass(); </li></ul></li><li><p>4.final 用来修饰变量  此时的”变量“就称为是一个常量</p><ul><li>4.1 final修饰属性：可以考虑赋值的位置有：显式初始化、代码块初始化、构造器初始化</li><li>4.2 final可以用来修饰局部变量：<br>尤其是使用final修饰形参时，表明此形参是一个常量，当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在此方法体内使用此形参，不能再重新赋值<h1 id="类的成员之四：代码块"><a href="#类的成员之四：代码块" class="headerlink" title="类的成员之四：代码块"></a>类的成员之四：代码块</h1></li></ul></li><li><p>1.代码块的作用：用来初始化类、对象</p></li><li><p>2.代码块如果有修饰符的话，只能使用static</p></li><li><p>3.分类静态代码块VS非静态代码块</p></li><li><p>4.静态代码块</p><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行</li><li>只会执行一次</li><li>初始化类的信息</li><li>如果一个类中定义了多个代码块，则按照先后顺序执行</li><li>静态代码块优先于非静态代码块执行</li></ul></li><li><p>5.非静态代码块</p><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就会执行一次</li><li>做用：可以在创建对象时，对对象的属性进行初始化</li><li>如果一个类中定义了多个代码块，则按照先后顺序执行</li></ul></li><li><p>6.对属性赋值的位置：<br>① 默认初始化<br>②显式初始化/③代码块种赋值(执行的顺序由声明的先后顺序决定)<br>④构造器种初始化<br>⑤有了对象以后，可以通过”对象.属性”或”对象.方法”的方式进行赋值    </p></li></ul><p><strong>执行的先后顺序：由父及子，静态先行</strong></p><ul><li>使用案例<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockTest</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span> desc = Person.desc;</span><br><span class="line">System.out.<span class="built_in">println</span>(desc);</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">23</span>,<span class="string">"tom"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">String</span> name;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">String</span> desc = <span class="string">"我是一个人"</span>;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">super();</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">" block"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"static block -1"</span>);</span><br><span class="line">desc = <span class="string">"我很开心"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>( <span class="string">"static block"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类的内部成员之五：内部类"><a href="#类的内部成员之五：内部类" class="headerlink" title="类的内部成员之五：内部类"></a>类的内部成员之五：内部类</h1></li><li>1.Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B就称为外部类</li><li>2.内部类的分类：成员内部类(静态、非静态)vs 局部内部类（方法内、代码块内、构造器内）</li><li>3.成员内部类：<ul><li>一方面：作为外部类的成员<br>  ①调用外部类的结构<br>  ②可以被static修饰<br>  ③可以被四种不同的权限修饰     </li><li>另一方面，作为一个类：<br>  ①类内可以定义属性、方法、构造器<br>  ②可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承<br>  ③可以被abstract修饰</li></ul></li><li>4.关注如下的3个问题<ul><li>4.1 如何实例化成员内部类的对象</li><li>4.2 如何成员内部类中区分调用外部类的结构</li><li>4.3 开发中局部内部类的使用</li></ul></li><li>使用案例<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建Man实例(静态的成员内部类)</span></span><br><span class="line">Person.Man man = <span class="keyword">new</span> Person.Man();</span><br><span class="line">man.method(<span class="string">"我是man中的形参"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"***************************************"</span>);</span><br><span class="line"><span class="comment">//创建非静态的内部类实例</span></span><br><span class="line">Person  p =<span class="keyword">new</span> Person();</span><br><span class="line">Person.WoMan woman= p.<span class="keyword">new</span> WoMan(); </span><br><span class="line">woman.method(<span class="string">"我是woman中的形参"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">String</span> name=<span class="string">"我是外部类的name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"我是外部类的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器内的内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brid</span> <span class="title">extends</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">int</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"我是内部类的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.method();</span><br><span class="line">Person.<span class="keyword">this</span>.method();<span class="comment">// 调用内部类父类中被重写的方法用”父类名.this.方法名“</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中的静态内部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> &#123;</span><span class="comment">// 作为类的成员，可以被static修饰，表示随着外部类的加载而加载</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">String</span> name = <span class="string">"我是静态内部类的name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"age:"</span> + age + <span class="string">",name:"</span> + name);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.name);</span><br><span class="line"><span class="comment">//System.out.println(Person.this.name);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类中的非静态内部类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WoMan</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">String</span> name = <span class="string">"我是非静态内部类的name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"age:"</span> + age + <span class="string">",name:"</span> + name);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.name);</span><br><span class="line">System.out.<span class="built_in">println</span>(Person.<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块中的内部类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span><span class="comment">// 用final修饰表示不可被继承</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法中的内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> &#123;</span><span class="comment">// 用abstract修饰，表示不能创建对象</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1></li></ul><p>1.接口使用interface来定义<br>2.Java中，接口和类是并列的两个结构</p><ul><li>3.如何定义接口：定义接口中的成员<ul><li>3.1 jdk7及以前：定义全局常量和抽象方法<br>①全局常量：public static final的，但是书写时，可以省略不写<br>②抽象方法：public abstract的，也可省略不写    </li><li>3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态的方法、默认方法(略)    </li></ul>  3.2.1接口中定义静态方法，只能通过接口来调用”接口名.静态方法”<br>  3.2.2 通过实现类的对象，可以调用接口中的默认方法<br>  如果实现类重写了接口中的默认方法，调用时，仍然调用的时重写以后的方法<br>  3.2.3如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，<br>  那么子类在没有重写此方法的情况下，默认使用的是父类中的同名同参数的方法<br>  3.2.4 如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，<br>  那么在实现类中没有重写此方法的情况下，报错—》接口冲突<br>  此时我们需要在实现类中重写此方法。<br>  3.2.5 调用父类中的被重写的方法我们用        “super.方法名()”，<br>  当我们调用不同接口中的同名方法时，用”接口名.super.方法名()”     </li><li>4.接口中不能定义构造器的！意味着接口不可被实例化 </li><li>5.Java开发中，接口通过让类去实现(implements)的方法来使用<br>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化<br>如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类。  </li><li>6.Java类中可以实现多个接口–》弥补了Java但继承性的局限性<br>格式：先继承 class 类名 extends object implements 接口1，接口2……{}    </li><li>7.接口之间可以继承，而且可以多继承,<br>  当一个类连接了一个继承了多个接口的接口时需要把所有的接口中的方法重写之后，才能实例化<hr></li><li>8.接口的具体使用，体现多态性</li><li>9.接口，实际上可以看作一种规则</li><li>使用案例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntetrfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Plane p1 = <span class="keyword">new</span> Plane();</span><br><span class="line">p1.fly();</span><br><span class="line">p1.stop();</span><br><span class="line">p1.attack();</span><br><span class="line">Bullet b1 = <span class="keyword">new</span> Bullet();</span><br><span class="line">b1.attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口1</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口2</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">String NAME = <span class="string">"可以飞"</span>;<span class="comment">// 省略了 public static final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;</span><br><span class="line"><span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>;<span class="comment">// 省略了 public static final</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;<span class="comment">// 省略了public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类(连接接口)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Attackable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"飞机起飞，最高速度为："</span> + MAX_SPEED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"飞机降落，最慢速度为："</span> + MIN_SPEED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"战斗机可以发射导弹!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未实现接口中所有的抽象方法，只能是抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Brid</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小鸟可以飞"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Attackable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子弹命中敌人造成伤害"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子弹可以飞的很快"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"超过最大射程，子弹会停下来"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> static </tag>
            
            <tag> abstract </tag>
            
            <tag> final </tag>
            
            <tag> 代码块 </tag>
            
            <tag> 内部类 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-面向对象（中）</title>
      <link href="/2020/04/11/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2020/04/11/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象-中篇"><a href="#Java面向对象-中篇" class="headerlink" title="Java面向对象(中篇)"></a>Java面向对象(中篇)</h1><a id="more"></a><h1 id="面向对象的特征之一：封装与隐藏"><a href="#面向对象的特征之一：封装与隐藏" class="headerlink" title="面向对象的特征之一：封装与隐藏"></a>面向对象的特征之一：封装与隐藏</h1><ul><li>为什么需要封装？封装的作用和含义？    <blockquote><p>我要用洗衣机，只需要按一下开关和洗涤模式就可以了，有必要去了解洗衣机的内部结构吗？有必要去碰电动机吗？</p></blockquote></li><li>我们程序追求“高内聚、低耦合”<br>高内聚：类的内部数据操作细节自己完成，不允许外部干涉<br>低耦合：仅对外暴露少量的方法用于自己使用</li></ul><hr><h2 id="问题引入："><a href="#问题引入：" class="headerlink" title="问题引入："></a>问题引入：</h2><p>当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受属性的数据类型和存储<br>范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性赋值时加入额外的限制条件。这个条件就不能在<br>属性声明时体现，我们往往只能通过方法进行制约条件的添加。<br>同时，我们为了避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private)<br>–&gt;此时，针对属性就体现了封装性。</p><hr><h2 id="封装性的体现："><a href="#封装性的体现：" class="headerlink" title="封装性的体现："></a>封装性的体现：</h2><ul><li>我们将类的私有化(private)，同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值。</li><li>拓展：封装性的体现① 如上 ② 不对外暴露的私有的方法 ③ 单例模式  。。。  </li></ul><hr><h3 id="封装性的体现，需要权限修饰符来配合。"><a href="#封装性的体现，需要权限修饰符来配合。" class="headerlink" title="封装性的体现，需要权限修饰符来配合。"></a>封装性的体现，需要权限修饰符来配合。</h3><ul><li>Java规定的四种权限(从小到大)：private、缺省、protected、public</li><li>四种权限可以用来修饰类及类中的内部结构：属性、方法、构造器、内部类</li><li>具体的，四种权限都可以用来修饰类中的内部结构：属性、方法、构造器、内部类<br>修饰类的话，只能用：缺省、public<br>实参：方法调用时传递给形参的数据  </li></ul><ul><li>我们在封装属性的同时，常常提供get和set方法，来更改和获取对应的属性的值。</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="总结封装性：Java提供了四种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构再被调用时可见性的大小。"><a href="#总结封装性：Java提供了四种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构再被调用时可见性的大小。" class="headerlink" title="总结封装性：Java提供了四种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构再被调用时可见性的大小。"></a>总结封装性：Java提供了四种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构再被调用时可见性的大小。</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">//a.legs = 25;//不可更改私有属性</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> legs;<span class="comment">// 将腿的个数私有化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给腿的个数限制条件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLegs</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= <span class="number">0</span> &amp;&amp; l % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">legs = l;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">legs = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLegs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> legs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h2><ol><li>this可以用来修饰：属性、方法、构造器</li><li>this修饰属性和方法<br>this理解为：当前对象 或 当前正在创建的对象    <ul><li>2.1 在类的方法中，我们可以使用”this.属性”或”this.方法”的方法，调用当前对象属性或方法。但是通常情况下我们都选择省略”this.”。特殊情况下，如果方法的形参和类属性同名，我们必须显式的使用“this.变量”的方式。表明此变量是属性，而非形参</li><li>2.2 在类的构造器中我们可以使用”this.属性”或”this.方法”的方法，调用当前正在创建的对象属性或方法。但是通常情况下我们都选择省略”this.”。特殊情况下，如果方法的形参和类属性同名，我们必须显式的使用“this.“变量的方式。表明此变量是属性，而非形参</li></ul></li><li>this调用构造器</li></ol><ul><li>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li><li>② 构造器中不能通过”this(形参列表)”方式调用自己</li><li>③ 如果一个类中有n个构造器，则最有n-1构造器中使用了”this(形参列表)”</li><li>④ 规定：”this(形参列表)”必须声明在当前构造器的首行</li><li>⑤ 构造器内部，最多只能声明一个”this(形参列表)”用来调用其他构造器</li></ul><hr><h2 id="import关键字的使用"><a href="#import关键字的使用" class="headerlink" title="import关键字的使用"></a>import关键字的使用</h2><ul><li>import： 导入</li></ul><ol><li>在源文件中显式的使用import结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出即可</li><li>可以使用”xxx.*”的方式，表达可以导入xxx包下的所有结构</li><li>如果使用的类或接口是Java.lang包下定义的，则可以省略import结构</li><li>如果使用的类或接口是本包下定义的，则可以省略import结构</li><li>如果在源文件中，使用不同包下同名的类，则必须至少有一个类需要以全类名的方式显示。</li><li>使用”xxx.*”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显示的导入子包 </li><li>import static：导入指定类或接口的静态接口：属性或方法。    </li></ol><hr><h1 id="面向对象的特征之二：继承性"><a href="#面向对象的特征之二：继承性" class="headerlink" title="面向对象的特征之二：继承性"></a>面向对象的特征之二：继承性</h1><h2 id="继承性的好处"><a href="#继承性的好处" class="headerlink" title="继承性的好处"></a>继承性的好处</h2><ul><li>① 减少代码的冗余 提高代码的复用性</li><li>② 便于功能的拓展</li><li>③ 为之后的多态性，提供了前提<h2 id="继承的格式：class-A-extends-B"><a href="#继承的格式：class-A-extends-B" class="headerlink" title="继承的格式：class A extends B{ }"></a>继承的格式：class A extends B{ }</h2>A:子类、派生类、subclass<br>B:父类、超类、基类、superclass    <ul><li>2.1 体现:一旦子类A继承父类B以后，子类A中就获取了父类B中声明的结构：属性和方法<br>特别的 父类中声明为private的属性或方法，子类继承父类以后，任然认为获取了父类中私有的结构。只因为有封装性的影响，使得子类不能直接调用父类的结构而已。</li><li>2.2  子类继承父类以后，还可以定义自己的方法和属性，实现功能的拓展</li></ul></li></ul><hr><h2 id="Java-中关于类的规定-单继承性"><a href="#Java-中关于类的规定-单继承性" class="headerlink" title="Java 中关于类的规定   单继承性"></a>Java 中关于类的规定   单继承性</h2><ul><li>一个类可以让多个子类继承</li><li>子父类是相对的概念。</li></ul><hr><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>如果我们没有显式的声明一个类的父类的话，则此类继承于Java.lang.object类</li><li>且 所以的类都间接或直接的继承于Java.lang.object类(除了他本身)</li><li>意味着，所有的Java类都具备Java.lang.object的所有功能。</li></ul><hr><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><h3 id="super关键字的使用"><a href="#super关键字的使用" class="headerlink" title="super关键字的使用"></a>super关键字的使用</h3><ul><li>super理解为：父类的</li><li>super可以用来调用：属性、方法、构造器</li><li>super的具体使用：属性和方法<ul><li>我们可以在子类的方法或构造器中，通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li><li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的方法和属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li><li>特殊情况：当子类重写了父类中的方法以后，我们想在子类中的方法调用父类中被重写的方法时，则必须显式的使用”super.方法”  的方式，表明调用的时父类中被重写的方法。</li></ul></li><li>super的使用：构造器<ul><li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器<ul><li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li><li>4.3 我们在类的构造器中，针对于”super(形参列表)”或”this(形参列表)”只能二选一使用</li></ul></li><li>4.4在构造器的首行没有显式的声明”this()”或”super() “,则子类的构造器中默认首行有一个”super()”<ul><li>4.5 在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用了父类中的构造器</li></ul></li></ul></li></ul><hr><h3 id="子类对象实体话的全过程"><a href="#子类对象实体话的全过程" class="headerlink" title="子类对象实体话的全过程"></a>子类对象实体话的全过程</h3><ol><li>从结果上看：(继承性)：<br>子类继承父类以后，就获取了父类中声明的属性或方法<br>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性    </li><li>从过程上来看：<br>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，直到调用了Java.lang.Object类中的构造器为止。正因为加载过所有父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用     </li></ol><h2 id="明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象"><a href="#明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象" class="headerlink" title="明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象"></a><strong>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象</strong></h2><h1 id="面向对象的特性之三：多态性"><a href="#面向对象的特性之三：多态性" class="headerlink" title="面向对象的特性之三：多态性"></a>面向对象的特性之三：多态性</h1><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><ol><li>重写：子类继承父类以后，可以对父类中同名参数的方法，进行覆盖操作</li><li>应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中同名同参数的方法时，实际上执行的是子类重写父类的方法。</li><li>重写的规定：<br>方法的声明：权限修饰符 返回值类型 方法名(形参列表){<br>//方法体<br>}<br>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法<br>①  子类重写的方法和方法名和形参列表与父类被重写的方法和形参列表相同<br>②  子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</li></ol><p><strong>特殊情况：子类不能重写父类中声明为private权限的方法</strong><br>③返回值类型<br>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能说void<br>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以说A类或是A类的子类<br>父类被重写的方法的返回值类型是如果是基本类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型。(必须是double)<br>④ 子类重写的方法抛出的异常类型不大于父类被重写方法是抛出的异常类型<br>⑤ 子类和父类中同名同参数的方法要么都声明为非static的(考虑重写)，要么都声明为static的(不是重写)</p><hr><h2 id="多态性的理解"><a href="#多态性的理解" class="headerlink" title="多态性的理解"></a>多态性的理解</h2><ol><li>理解多态性：可以理解为一个事物的多种形态</li><li>何为多态性？<br>对象的多态性：父类的引用指向子类的对象(或子类的对象赋给父类的引用)</li><li>多态的使用，虚拟方法的调用<br>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期间，我们实际上执行的是子类重写父类方法。<br><strong>总结：编译看左，运行，看右边</strong></li><li>多态性的使用前提：① 类的继承关系 ②方法的重写</li><li>对象的多态性：只适用于方法，不适用于属性(编译运行都看左边)</li></ol><hr><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> &#123;</span></span><br><span class="line"><span class="comment">// 多态性的使用举例一：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">AnimalTest a = <span class="keyword">new</span> AnimalTest();</span><br><span class="line">a.test(<span class="keyword">new</span> Dog());</span><br><span class="line">a.test(<span class="keyword">new</span> Cat());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">animal.eat();</span><br><span class="line">animal.shout();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"动物：吃东西"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"动物：叫"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"狗：吃骨头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"狗：汪！汪！汪！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"猫：吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"猫：喵！喵！喵！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="向下转型的几个常见问题"><a href="#向下转型的几个常见问题" class="headerlink" title="向下转型的几个常见问题"></a>向下转型的几个常见问题</h3><ul><li>多态的使用：当前父类同名的参数的方法时，实际执行的是子类重写父类的方法–虚拟方法调用</li><li>不能调用子类中特有的方法、属性：  编译时 实例是左边的类型</li><li>有了对象的多态性以后，内存实际上加载了子类特有的属性和方法的，但是由于声明变量为父类类型<br>导致编译时，只能调用父类中声明的属性和方法。子类中特有的方法和属性不能调用。</li><li>如何才能调用子类特有的属性和方法？<br>  向下转型    使用强制类型转换<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Animal</span> <span class="built_in">a1</span> = new Dog()<span class="comment">;</span></span><br><span class="line"><span class="symbol">Dog</span> <span class="built_in">d1</span> = (Dog)<span class="built_in">a1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>但是强制转换可能会出现错误，如何避免错误呢？</li></ul><hr><h3 id="instanceof的使用"><a href="#instanceof的使用" class="headerlink" title="instanceof的使用"></a>instanceof的使用</h3><ul><li>使用强转时，可能出现ClassCastException的异常<br>为了避免出现这种异常，我们常常使用instanceof的关键字</li><li>a  instanceof A:判断对象a是否是类A的实例，如果是，返回true，如果不是则返回false</li><li>如果 a  instanceof A 是true，那么a  instanceof A的父类也是true；</li><li>使用情景：为了避免向下转型出现ClassCastException异常，我们在向下转型之前，先进行instanceof<br>进行判断，一旦返回true，就进行向下转型，如果是false就不转型。</li></ul><hr><h3 id="多态性练习"><a href="#多态性练习" class="headerlink" title="多态性练习"></a>多态性练习</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="title">extends</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIeldMethodTest</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">System.out.<span class="built_in">println</span>(s.count);<span class="comment">//20</span></span><br><span class="line">s.<span class="built_in">display</span>();<span class="comment">//20</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"*******"</span>);</span><br><span class="line">Base b = <span class="keyword">new</span> Sub();</span><br><span class="line">Base b1 = s;</span><br><span class="line">System.out.<span class="built_in">println</span>(b1.count);<span class="comment">//10</span></span><br><span class="line">System.out.<span class="built_in">println</span>(b1==s);<span class="comment">//true</span></span><br><span class="line">b1.<span class="built_in">display</span>();<span class="comment">//20</span></span><br><span class="line">b.<span class="built_in">display</span>();<span class="comment">//20</span></span><br><span class="line">System.out.<span class="built_in">println</span>(b.count);<span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//考查多态的笔试题目：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntervireTest1</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">Base1 <span class="keyword">base</span> = <span class="keyword">new</span> Sub1();</span><br><span class="line"> <span class="keyword">base</span>.<span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//sub_1</span></span><br><span class="line"></span><br><span class="line">Sub1 s = (Sub1) <span class="keyword">base</span>;</span><br><span class="line">s.<span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//sub_2</span></span><br><span class="line">Sub1 a = <span class="keyword">new</span> Sub1();</span><br><span class="line">a.<span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//sub_2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span>... arr</span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"base"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Sub1</span> <span class="title">extends</span> <span class="title">Base1</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span>[] arr</span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"sub_1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c</span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"sub_2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Object类的剖析"><a href="#Object类的剖析" class="headerlink" title="Object类的剖析"></a>Object类的剖析</h2><h3 id="和equals-的使用区别"><a href="#和equals-的使用区别" class="headerlink" title="==和equals()的使用区别"></a>==和equals()的使用区别</h3><p>通常我们用“==”来比较基本数据类型所存储的变量是否相等，而使用“==”比较引用数据类型时，则常常比较的是两个引用的地址是否一样，而String中提供了一种equals()方法，可以用来比较引用所存储的变量是否相等，所以我们可以在其他类种重写equals方法，从而实现两个引用种常量的比较</p><ul><li>==：运算符   </li></ul><ol><li>可以在基本数据类型变量和引用数据类型变量中      </li><li>如果比较的是基本数据类型变量，比较两个变量中的数据是否相等(类型不一定要相等)     </li><li>如果比较的是引用数据类型，则比较的是地址值是否相等， 即比较两个引用是否是同一个实体。     </li></ol><ul><li>equals()方法的使用    </li></ul><ol><li>是一个方法，非运算符    </li><li>之能适用于引用数据类型    </li><li>object()中的equals()方法    <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>说明Object类中定义的equals()和==的作用是相同的，比较两个对象的地址值是否相同，即比较两个引用是否是同一个实体    </li><li>像String、Data、File、包装类等都重写了Object类中的equals()方法，重写以后，是比较两个对象<br>实体内容是否相等。    </li><li>通常情况下，我们自定义的类如果使用equals()方法对比实体内容是否相同，就需要对equals方法进行重写。</li></ol><ul><li>练习使用<ul><li>编写Order类，有int型的orderId，String型的orderName;</li><li>相应的getter()和setter()方法，两个参数的构造器</li><li>重写父类中的equals()方法，public boolean equals(Object obj)。</li><li>并判断测试中创建的两个对象是否相等。  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">equalstest</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">Order o1=<span class="keyword">new</span> Order(<span class="number">12</span>,<span class="string">"tom"</span>);</span><br><span class="line">Order o2=<span class="keyword">new</span> Order(<span class="number">12</span>,<span class="string">"tom"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(o1.equals(o2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> orderName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(<span class="keyword">int</span> orderId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(<span class="keyword">String</span> orderName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(<span class="keyword">int</span> orderId, <span class="keyword">String</span> orderName)</span> </span>&#123;</span><br><span class="line">super();</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj instanceof Order) &#123;</span><br><span class="line">Order order = (Order) obj;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.orderId == order.orderId</span><br><span class="line">&amp;&amp; <span class="keyword">this</span>.orderName.equals(orderName)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toString-方法的使用"><a href="#toString-方法的使用" class="headerlink" title="toString()方法的使用"></a>toString()方法的使用</h3>Object中的toString()方法的使用</li></ul></li><li>1.当我们输出一个对象的引用，实际上执行的就是调用当前对象的toString()</li><li>2.Object类中的toString()的定义<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String <span class="keyword">to</span><span class="constructor">String()</span> &#123;</span><br><span class="line">return get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span> + <span class="string">"@"</span> + <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">hashCode</span>()</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>3.像String、Data、File、包装类等都重写了Object类中的toString()方法,<br>使得在调用同String()时，返回”实体内容“ </li><li>4.自定义类中也可以重写toString()方法，当调用此方法时，返回”实体内容“    <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringTest</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">Animal a = <span class="keyword">new</span> Animal(<span class="string">"Tom"</span>, <span class="number">12</span>);</span><br><span class="line">Animal a1 = <span class="keyword">new</span> Animal(<span class="string">"Jerry"</span>, <span class="number">10</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(a.toString());<span class="comment">//Animal [name=Tom, age=12]</span></span><br><span class="line">System.out.<span class="built_in">println</span>(a1.toString());</span><br><span class="line"><span class="comment">//Animal [name=Jerry, age=10]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Animal [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="单元测试方法的使用"><a href="#单元测试方法的使用" class="headerlink" title="单元测试方法的使用"></a>单元测试方法的使用</h2><ul><li>步骤</li></ul><p>1.选中当前工程。右键选择build path – add libraries – JUnit 4 -下一步<br>2.创建当前Java类，进行单元测试。<br>此时的Java类要求：① 此类事public的② 此类提供公共的无参构造器<br>3.此类中声明单元测试方法：方法的权限是public，没有返回值，没有形参<br>4.此单元测试方法上需要生命注解：@Test，并在单元测试类中导入：import org.junit.Test;<br>5.此单元测试方法以后，就可以在方法体内测试相关的代码。<br>6.写完代码后，左键双击单元测试方法名，右键：run  as–》JUnit Test    </p><ul><li>说明：    </li></ul><p>1.如果执行结果没有任何异常：绿条<br>2.如果执行结果出现异常：红条</p><h2 id="包装类的理解、基本数据类型和String的转换"><a href="#包装类的理解、基本数据类型和String的转换" class="headerlink" title="包装类的理解、基本数据类型和String的转换"></a>包装类的理解、基本数据类型和String的转换</h2><ul><li>什么是包装类？为什么要使用包装类?<br>Java是一门面向对象的语言，但是基本数据类型没有很好的体现面向对象的特性，所以我们把基本数据类型放到类中，让它也能实现类的特性。</li><li>包装类的使用：<br>① Java提供了8种剧本数据类型对应的包装类，使得基本数据类型的变量具有类的属性<br>② 掌握的：基本数据类型、包括类、String三者之间的相互转换<br><img src="/.com//%E5%87%A0%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="几种数据类型的转换"></li><li>基本数据类型–&gt;包装类，调用包装类的构造器    <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> WrapperTest &#123;</span><br><span class="line">// 基本数据类型<span class="comment">---》包装类，调用包装类的构造器</span></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test1() &#123;</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(num1);</span><br><span class="line"><span class="type">Integer</span> in1 = <span class="built_in">new</span> <span class="type">Integer</span>(num1);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(in1.toString());</span><br><span class="line"><span class="type">Integer</span> in2 = <span class="built_in">new</span> <span class="type">Integer</span>("123");</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(in2);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("************************************");</span><br><span class="line"><span class="type">Float</span> f1 = <span class="built_in">new</span> <span class="type">Float</span>(<span class="number">12.3</span>f);</span><br><span class="line"><span class="type">Float</span> f2 = <span class="built_in">new</span> <span class="type">Float</span>("12.3");</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(f1);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(f2);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("**************************************");</span><br><span class="line"><span class="type">Boolean</span> b1 = <span class="built_in">new</span> <span class="type">Boolean</span>(<span class="keyword">true</span>);</span><br><span class="line"><span class="type">Boolean</span> b2 = <span class="built_in">new</span> <span class="type">Boolean</span>("True");</span><br><span class="line"><span class="type">Boolean</span> b3 = <span class="built_in">new</span> <span class="type">Boolean</span>("true123");</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(b1);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(b2);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(b3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></li><li>包装类—–&gt;基本数据类型：调用包装类的xxxValue()<br>JDK 5.0 新特性：自动装箱和自动拆箱<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> *包装类<span class="comment">-----&gt;基本数据类型：调用包装类的xxxValue() </span></span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test2()&#123;</span><br><span class="line"><span class="type">Integer</span> in1 = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="type">int</span> i= in1.intValue();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line"></span><br><span class="line"><span class="type">Float</span> f1 = <span class="built_in">new</span> <span class="type">Float</span>(<span class="number">12.3</span>);</span><br><span class="line"><span class="type">float</span> f = f1.floatValue();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(f+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JDK 5.0 新特性：自动装箱和自动拆箱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test3()&#123;</span><br><span class="line">//<span class="type">int</span> num1 =<span class="number">10</span>;</span><br><span class="line">//<span class="keyword">method</span>(num1);</span><br><span class="line">//自动装箱</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> in1 = num2;//自动装箱</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line"><span class="type">Boolean</span> b2 = b1;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(b2.toString());</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(in1.toString());</span><br><span class="line">//自动拆箱：包装类<span class="comment">-----&gt;基本数据类型</span></span><br><span class="line">//<span class="type">int</span> num3 = in1;</span><br><span class="line">//<span class="keyword">System</span>.<span class="keyword">out</span>.println(num3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>基本数据类型、包装类—》String类型：调用String的重载的ValueOf(Xxx xxx)<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型、包装类---》String类型：调用String的重载的ValueOf(Xxx xxx)</span></span><br><span class="line">@Test</span><br><span class="line">public void test4<span class="literal">()</span>&#123;</span><br><span class="line"><span class="built_in">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//方式一：连接运算</span></span><br><span class="line">String str1= num1+<span class="string">""</span>;</span><br><span class="line"><span class="comment">//方式二：调用String的valueof(Xxx xxx)</span></span><br><span class="line"><span class="built_in">float</span> f1 = <span class="number">12.3</span>f;</span><br><span class="line">String str2 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">f1</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str2); </span><br><span class="line"></span><br><span class="line">Double d1 = <span class="keyword">new</span> <span class="constructor">Double(12.4)</span>;</span><br><span class="line">String str3 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">d1</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>String 类型–》基本数据类型、包装类、调用包装类的parseXxx()<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//String 类型<span class="comment">--》基本数据类型、包装类、调用包装类的parseXxx()</span></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test5()&#123;</span><br><span class="line">String str1 = "123";</span><br><span class="line">//错误的情况：</span><br><span class="line">//<span class="type">int</span> num1 = (<span class="type">int</span> )str1;</span><br><span class="line">//<span class="type">Integer</span> in1 = (<span class="type">Integer</span>)str1;</span><br><span class="line"><span class="type">int</span> i =  <span class="type">Integer</span>.parseInt(str1); </span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line">         String s1 ="true";</span><br><span class="line">         <span class="type">boolean</span> b1= <span class="type">Boolean</span>.parseBoolean(s1);</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println(b1);</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">method</span>(<span class="keyword">Object</span> obj)&#123;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>包装类的面试题<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.baozhuanglei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 包装类的面试题</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> WrapperTest1 &#123;</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test1() &#123;</span><br><span class="line"><span class="keyword">Object</span> o1 = <span class="keyword">true</span> ? <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">1</span>) : <span class="built_in">new</span> <span class="type">Double</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(o1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test2() &#123;</span><br><span class="line"><span class="keyword">Object</span> o2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">o2 = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">o2 = <span class="built_in">new</span> <span class="type">Double</span>(<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(o2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test3() &#123;</span><br><span class="line"><span class="type">Integer</span> i = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> j = <span class="built_in">new</span> <span class="type">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(j == i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test4() &#123;</span><br><span class="line">//<span class="type">Integer</span> 内部定义了IntegerCache结构，IntegerCache种定义了<span class="type">Integer</span>[],</span><br><span class="line">//保存了从<span class="number">-128</span>~<span class="number">127</span>范围的整数，如果我们使用自动装箱的方式，给Intteger</span><br><span class="line">//赋值的范围在<span class="number">-128</span>~<span class="number">127</span>范围内，可以直接使用数组种的元素。不用再去<span class="built_in">new</span>了</span><br><span class="line">//目的是为了提高效率</span><br><span class="line"><span class="type">Integer</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(j == i);</span><br><span class="line"><span class="type">Integer</span> m = <span class="number">129</span>;</span><br><span class="line"><span class="type">Integer</span> n = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(m == n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 封装性 </tag>
            
            <tag> 继承性 </tag>
            
            <tag> 多态性 </tag>
            
            <tag> this关键字 </tag>
            
            <tag> package关键字 </tag>
            
            <tag> super关键字 </tag>
            
            <tag> import关键字 </tag>
            
            <tag> 方法的重写 </tag>
            
            <tag> 向下转型 </tag>
            
            <tag> instanceof </tag>
            
            <tag> equals() </tag>
            
            <tag> toString() </tag>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-面向对象(上)</title>
      <link href="/2020/04/08/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/"/>
      <url>/2020/04/08/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><a id="more"></a><h2 id="一、面向对象的三条主线"><a href="#一、面向对象的三条主线" class="headerlink" title="一、面向对象的三条主线"></a>一、面向对象的三条主线</h2><ul><li><ol><li>Java 类及成员：属性、方法、构造器；代码块、内部块</li></ol></li><li><ol start="2"><li>面向对象的三大特征：封装性、继承性、多态性（抽象性）</li></ol></li><li><ol start="3"><li>其他关键字：this、super、static、final、interface、package、import等<h2 id="二、面向对象的两个要素"><a href="#二、面向对象的两个要素" class="headerlink" title="二、面向对象的两个要素"></a>二、面向对象的两个要素</h2></li></ol></li><li><p>类：对一类事实的描述，是抽象的、概念上的定义</p></li><li><p>对象：是实际存在的该类事物的每个个体，因而也被称为实例。（instance）</p><blockquote><p>面向对象程序的重点是类的设计<br>设计类，就是设计类的成员      </p></blockquote></li><li><p>成员：Field=属性 成员变量，Method=（成员）方法=函数   </p></li><li><p>创建类的对象 = 类的实体化 = 实例化类</p><h2 id="三、类和对象的使用（面向对象思想落地的实现）"><a href="#三、类和对象的使用（面向对象思想落地的实现）" class="headerlink" title="三、类和对象的使用（面向对象思想落地的实现）"></a>三、类和对象的使用（面向对象思想落地的实现）</h2></li></ul><ol><li>创建类，设计类的成员<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建类，设计类的成员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"人可以吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"人可以睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takle</span><span class="params">(<span class="keyword">String</span> language)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"人可以交流，使用的是："</span>+language);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建类的成员<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 创建类的成员</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> <span class="type">Person</span>();</span><br></pre></td></tr></table></figure></li><li>通过“对象.属性”或“对象.方法”调用对象的结构<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//3. 通过“对象.属性”或“对象.方法”调用对象的结构</span><br><span class="line">p1.name=<span class="string">"Tom"</span>;</span><br><span class="line">System.out.println(p1.age);</span><br><span class="line">p1.isMale=true;</span><br><span class="line">p1.eat();</span><br><span class="line">p1.sleep();</span><br><span class="line">p1.takle(<span class="string">"Chinaese"</span>);</span><br><span class="line">//*************************</span><br><span class="line">//类似Array2 = Array1，将p1变量保存的对象地址值赋给p3，导致p1和p3指向了堆空间同一个对象实体。</span><br><span class="line">Person p2 = p1;</span><br><span class="line">System.out.println(p2.name);//Tom</span><br><span class="line">p2.age = 10;</span><br><span class="line">System.out.println(p1.age);//10</span><br></pre></td></tr></table></figure><h2 id="四、-如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static）"><a href="#四、-如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static）" class="headerlink" title="四、 如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static）"></a>四、 如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static）</h2>意味着：如果我们修改了一个对象的属性a，则不影响另一个对象属性a的值。<h2 id="五、-对象在内存中的解析"><a href="#五、-对象在内存中的解析" class="headerlink" title="五、 对象在内存中的解析"></a>五、 对象在内存中的解析</h2><img src="/.com//%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.png" alt="对象的内存解析"><br><img src="/.com//%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90.png" alt="对象的内存代码解析">   <h1 id="类中-属性的使用"><a href="#类中-属性的使用" class="headerlink" title="类中 属性的使用"></a>类中 属性的使用</h1></li></ol><p><strong>属性（成员变量）VS 局部变量</strong></p><ul><li><ol><li>相同点  <ol><li>定义变量的格式：数据类型 变量名= 变量值</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ol></li></ol></li><li><ol start="2"><li><p>不同点<br><strong>2.1 在类中声明的位置不同</strong><br><strong>属性</strong>：直接定义在类中的一对{}中<br><strong>局部变量</strong>：声明在方法内，方法形参、代码块内、构造器形参、构造器内部的变量。  </p><p><strong>2.2 关于权限修饰符的不同</strong><br><strong>属性</strong>：可以在声明属性时，指明其权限，使用权限修饰符<br>常用的权限修饰符：private、public、缺省、protected —-&gt;封装性<br><strong>局部变量</strong>：不可以使用权限修饰符</p><p><strong>2.3 默认初始化值的情况</strong><br><strong>属性：</strong>   类的属性，根据其类型，都有默认初始化值<br>整型：0<br>浮点型0.0<br>字符型：’0’或者’\u0000’<br>布尔型：false<br>引用数据类型（类、数组、接):null<br><strong>局部变量：</strong><br>没有默认初始化值<br>意味着，调用局部变量时，一定要有显式赋值<br>特别的：形参在我们调用时赋值即可<br><strong>2.4  在内存中加载的位置</strong><br>属性：加载到堆空间（非static）<br>局部变量加载到栈空间   </p></li></ol></li></ul><hr><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line"><span class="comment">// 属性（成员变量）</span></span><br><span class="line"><span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(<span class="keyword">String</span> language)</span></span>&#123;<span class="comment">//language  : 形参，也是局部变量</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"我们使用"</span>+language+<span class="string">"进行交流"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">String</span> food = <span class="string">"馒头"</span>;<span class="comment">//局部变量</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"人可以吃"</span>+food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="类中方法的声明和使用"><a href="#类中方法的声明和使用" class="headerlink" title="类中方法的声明和使用"></a>类中方法的声明和使用</h1><p>方法：描述类应该具有的功能。</p><ul><li>比如：Math类：sqrt()\random()...</li><li>Scanner类：nextXxx()…</li><li>Arrays类：sort()\binarySearch()\toString()\equals()...<h2 id="1-举例"><a href="#1-举例" class="headerlink" title="1. 举例"></a>1. 举例</h2><ul><li>void 没有返回值</li><li>public void eat(){}–&gt;没有形参</li><li>public void sleep(int hour){}–&gt;有形参</li><li>String 返回String型值</li><li>public String getName(){}–&gt;没有形参</li><li>public String getNation(String nation){}–&gt;有形参<h2 id="2-方法的声明："><a href="#2-方法的声明：" class="headerlink" title="2. 方法的声明："></a>2. 方法的声明：</h2>权限修饰符 返回值类型  方法名(形参列表){<br> 方法体<br>}</li></ul></li></ul><ul><li>注意 ：这里不包括static、 final、abstract 来修饰的方法<h2 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h2></li></ul><ul><li>3.1权限修饰符：目前默认的权限修饰符为public<br>Java中常用的4中修饰符：private、public、缺省、protected–》封装性   </li><li>3.2返回值类型  有返回值 VS 没有返回值<ul><li>3.2.1如果方法有返回值，则必须在方法声明时，指定返回的类型，同时<br>方法中需要使用return关键字来返回指定类型的变量或常量。<br>如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，<br>就不需要使用return，但是使用的话，只能“return;”来表示此方法结束的意思。</li><li>3.2.2 怎么判断是否需要返回值？<br>  ② 凭自己的经验<br>  ① 根据题目要求</li></ul></li><li>3.3 方法名：属于标识符，遵循标识符的规范和规则，做到“见名知意”  </li><li>3.4 形参列表：方法可以声明0个、1个、多个形参   <ul><li>3.4.1 格式：数据类型1 形参1。数据类型2 形参2，…    </li><li>3.4.2 我们定义方法时：该不该定义形参？<br>  ② 凭自己的经验<br>   ① 根据题目要求    </li></ul></li><li>3.5 方法体：方法功能的体现<h2 id="4-return关键字的使用"><a href="#4-return关键字的使用" class="headerlink" title="4. return关键字的使用"></a>4. return关键字的使用</h2></li><li><ol><li>适用范围：使用在方法中</li></ol></li><li><ol start="2"><li>作用：    ① 结束方法<br>② 针对于有返回值的方法，使用”return 数据” 方法，返回所要的数据。</li></ol></li></ul><h2 id="5-方法的使用中，可以调用当前类的属性或方法"><a href="#5-方法的使用中，可以调用当前类的属性或方法" class="headerlink" title="5. 方法的使用中，可以调用当前类的属性或方法"></a>5. 方法的使用中，可以调用当前类的属性或方法</h2><p>在方法A中调用方法A，这种成为递归（要注意防止进入死循环）<br>  方法中不可以定义方法</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><hr><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.<span class="type">Test</span>;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * <span class="number">3</span>.<span class="number">1</span> 编写程序，声明一个<span class="keyword">method</span>方法，在方法中打印一个<span class="number">10</span>*<span class="number">8</span>的* 型矩阵；main方法中调用方该方法。</span><br><span class="line"> * </span><br><span class="line"> * <span class="number">3</span>.<span class="number">2</span> 修改上一个程序，在<span class="keyword">method</span>方法中，除打印一个<span class="number">10</span>*<span class="number">8</span>的*型矩阵外，再计算矩形的面积。</span><br><span class="line"> * 并将其作为方法返回值。再main方法中调用该方法，接收返回的面积值并打印。</span><br><span class="line"> * </span><br><span class="line"> * <span class="number">3</span>.<span class="number">3</span>修改上一个程序，再<span class="keyword">method</span>方法中提供m和n两个参数，方法中打印一个m*n型的矩阵。</span><br><span class="line"> * 并计算该矩阵的面积，将其作为方法返回值。再main方法中调用该方法，接收返回的面积值并打印。</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public class <span class="type">Exper3Test</span> &#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="type">Exper3Test</span> test = new <span class="type">Exper3Test</span>();</span><br><span class="line">//<span class="number">3</span>.<span class="number">1</span> 测试</span><br><span class="line">//test.<span class="type">Method</span>();</span><br><span class="line">//<span class="number">3</span>.<span class="number">2</span>测试</span><br><span class="line">//<span class="built_in">int</span> m = test.<span class="keyword">method</span>();</span><br><span class="line">//<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"面积为:"</span>+m);</span><br><span class="line">//<span class="number">3</span>.<span class="number">3</span> 测试</span><br><span class="line"><span class="built_in">int</span> a=test.<span class="keyword">method</span>(<span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"面积为:"</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//<span class="number">3</span>.<span class="number">1</span></span><br><span class="line">/*public <span class="built_in">void</span> <span class="type">Method</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;*/</span><br><span class="line">/*public <span class="built_in">int</span> <span class="keyword">method</span>()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>*<span class="number">8</span>;</span><br><span class="line">&#125;*/</span><br><span class="line">//<span class="number">3</span>.<span class="number">3</span> (三角)</span><br><span class="line">public <span class="built_in">int</span> <span class="keyword">method</span>(<span class="built_in">int</span> m,<span class="built_in">int</span> n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;n-i;j++)&#123;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (m*n)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="面向对象的练习"><a href="#面向对象的练习" class="headerlink" title="面向对象的练习"></a>面向对象的练习</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>定义类Student，包含三个属性：学号number(int),年级state(int)，成绩score(int)。创建20个学生对象。学号为1到20，年级和成绩都有随机数确定。<br>问题一：打印出3年级(state值为3)的学生信息。<br>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息<br>提示：<br>1）生成随机数：Math.random(),返回值类型double;<br>2）四舍五入取整：Math.round(double d),返回值类型long。    </li></ul><hr> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对象数组题目：</span></span><br><span class="line"><span class="comment"> * 定义类Student，包含三个属性：学号number(int),年级state(int)，成绩score(int)。创建20个学生对象。学号为1到20，</span></span><br><span class="line"><span class="comment"> * 年级和成绩都有随机数确定。</span></span><br><span class="line"><span class="comment"> * 问题一：打印出3年级(state值为3)的学生信息。</span></span><br><span class="line"><span class="comment"> * 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 提示：</span></span><br><span class="line"><span class="comment"> * 1）生成随机数：Math.random(),返回值类型double;</span></span><br><span class="line"><span class="comment"> * 2）四舍五入取整：Math.round(double d),返回值类型long。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">CopyOfMethodShuZuTestPlus</span> &#123;</span><br><span class="line"><span class="comment">//声明一个student类型的数组</span></span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">Student1[] stus = new Student1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++)&#123;</span><br><span class="line">stus[i] = new Student1();</span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="built_in">int</span>)(Math.random()*(<span class="number">6</span><span class="number">-1</span>+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="built_in">int</span>)(Math.random()*(<span class="number">100</span><span class="number">-0</span>+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">CopyOfMethodShuZuTestPlus student = new CopyOfMethodShuZuTestPlus();</span><br><span class="line"><span class="comment">//遍历学生数组</span></span><br><span class="line">student.ShowStudent(stus);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"*************************************"</span>);</span><br><span class="line"><span class="comment">//问题一：输出年级为3的学生信息</span></span><br><span class="line">student.SearchState(stus, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"*************************************"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题二：使用冒泡排序，按照学生成绩排序，并遍历所有学生信息</span></span><br><span class="line">student.Sort(stus);</span><br><span class="line">student.ShowStudent(stus);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> ShowStudent(Student1[] stus)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选指定年级</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> SearchState(Student1[] stus,<span class="built_in">int</span> i)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;stus.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].state == i)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(stus[j].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序，按照成绩排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> Sort(Student1[] stus)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;stus.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;stus.length<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score)&#123;</span><br><span class="line">Student1 temp = stus[j];</span><br><span class="line">stus[j]=stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Student1</span>&#123;</span><br><span class="line"><span class="built_in">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="built_in">int</span> state;<span class="comment">//年级</span></span><br><span class="line"><span class="built_in">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示学生信息的方法</span></span><br><span class="line"><span class="keyword">public</span> String info()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number+<span class="string">",年级："</span>+state+<span class="string">",成绩"</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="理解“万事万物皆对象”"><a href="#理解“万事万物皆对象”" class="headerlink" title="理解“万事万物皆对象”"></a>理解“万事万物皆对象”</h2><ul><li><ol><li>在java语言范畴中，我们都将功能、结构等封装到类中，通过类的实体化，来调用具体的功能结构</li></ol></li><li><ol start="2"><li>涉及到Java语言与前端HTML、后端数据库交互时、前后端的结构在Java层面交互时，都体现为类、对象<h2 id="二、-匿名对象的使用"><a href="#二、-匿名对象的使用" class="headerlink" title="二、 匿名对象的使用"></a>二、 匿名对象的使用</h2></li></ol></li></ul><ul><li>理解 ：我们创建的对象，没有显式的赋给一个名。</li><li>只能使用一次<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">phone</span>().price=<span class="number">999</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="type">phone</span>().showPrice();<span class="comment">//0.0</span></span><br></pre></td></tr></table></figure><h2 id="方法的重载（Overload）"><a href="#方法的重载（Overload）" class="headerlink" title="方法的重载（Overload）"></a>方法的重载（Overload）</h2></li></ul><ol><li>定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</li></ol><ul><li>“两同一不同”:同一个类、相同方法名</li><li>参数列表不同：参数类型不同、参数个数不同。</li></ul><ol start="2"><li>举例<br>Arrays中的重载 sort/ 等等</li><li>判断是否是重载<br>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系。</li><li>再通过对象调用方法时，如何确定某一个指定的方法？<br>方法名–》 参数列表</li></ol><ul><li>例子</li></ul><hr><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoad</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">OverLoad o = <span class="keyword">new</span> OverLoad();</span><br><span class="line">o.getSum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">o.getSum(<span class="number">0.1</span>, <span class="number">0.3</span>);</span><br><span class="line">o.getSum(<span class="string">"s"</span>, <span class="number">3</span>);</span><br><span class="line">o.getSum(<span class="number">3</span>, <span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">String</span> s,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">String</span> s)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>重构的方法测试</li></ul><hr><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadTest</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">OverLoadTest o = <span class="keyword">new</span> OverLoadTest();</span><br><span class="line">o.Max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重构Max方法1 比较两个int类型数的大小  输出较大的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>((a&gt;b)? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重构方法2  比较两个double类型数的大小，输出比较大的数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>((a&gt;b)? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重构方法3  比较三个double类型数的大小，输出较大的数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">max</span> = (a&gt;b)? a : b;</span><br><span class="line">System.out.<span class="built_in">println</span>((<span class="built_in">max</span> &gt;c)? <span class="built_in">max</span>: c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.atlizy.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 递归方法的使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Recursion</span> &#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">//计算1-100之间的所有自然数之和。</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span> ;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(sum);</span><br><span class="line">Recursion r = new Recursion();</span><br><span class="line">System.<span class="keyword">out</span>.println(r.getSum(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归方法求1-n内自然数之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> getSum(<span class="built_in">int</span> n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n + getSum(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例2 已知一个数列：f(0) = 1,f(1) = 4;f(n+2)=2*f(n+1)+f(n);</span></span><br><span class="line"><span class="comment">//其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//例4：斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例5：汉诺塔问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例6：快速排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="可变形参"><a href="#可变形参" class="headerlink" title="可变形参"></a>可变形参</h2><ul><li>1.jdk5.0新增内容</li><li>2.具体使用</li><li>2.1 可变个数形参的格式 数据类型 … 变量名</li><li>2.2 可以传入的形参个数为0、1、2、3…….</li><li>2.3 可变个数形参的方法与本类中方法名相同，形参不同的 方法之间构成重构</li><li>2.4 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重构。换句话说不能共存</li><li>2.5 可变个数的形参在方法的形参中，必须放在末尾</li><li>2.6 可变个数形参在方法的形参中，最多只能声明一个可变形参</li></ul><hr><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodArgs</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">MethodArgs m = <span class="keyword">new</span> MethodArgs();</span><br><span class="line">m.show(<span class="number">1</span>);</span><br><span class="line">m.show(<span class="string">"hello"</span>);</span><br><span class="line">m.show(<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"!"</span>);</span><br><span class="line">m.show(<span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"!"</span>&#125;);</span><br><span class="line">m.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public void show(String s)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println(s);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可变个数的形参,可以当作数组使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">String</span> ... strs)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;strs.length;i++)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变形参必须放在末尾</span></span><br><span class="line"><span class="comment">/*public void show(String ...sts2,String  sts)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>  sts,<span class="keyword">String</span> ...sts2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="方法的形参传递机制：值传递"><a href="#方法的形参传递机制：值传递" class="headerlink" title="方法的形参传递机制：值传递"></a>方法的形参传递机制：值传递</h1><ul><li>1.形参：方法定义时，声明在小括号里的参数<br><strong>如果变量是基本数据类型</strong>，此时实参传给形参的是实参阵势存储的数据值。<br><strong>如果参数是引用数据类型</strong>，此时参数赋给形参的是实参存储的数据的地址值</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 类 </tag>
            
            <tag> 方法 </tag>
            
            <tag> 成员变量 </tag>
            
            <tag> 局部变量 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 重构 </tag>
            
            <tag> 可变个数的形参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基础-数组</title>
      <link href="/2020/04/06/java-%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84/"/>
      <url>/2020/04/06/java-%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的定义和使用方法"><a href="#数组的定义和使用方法" class="headerlink" title="数组的定义和使用方法"></a>数组的定义和使用方法</h1><a id="more"></a><h2 id="一、数组的概念（一维数组）"><a href="#一、数组的概念（一维数组）" class="headerlink" title="一、数组的概念（一维数组）"></a>一、数组的概念（一维数组）</h2><h3 id="1-数组的理解，数组（Array），是多个相同类型数据按一定顺序排序的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。"><a href="#1-数组的理解，数组（Array），是多个相同类型数据按一定顺序排序的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。" class="headerlink" title="1.数组的理解，数组（Array），是多个相同类型数据按一定顺序排序的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。"></a>1.数组的理解，数组（Array），是多个相同类型数据按一定顺序排序的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</h3><ul><li><ol start="2"><li>数组相关的概念<blockquote><p>数据名<br>元素<br>角标、索引、下标（从零开始）<br>数组的长度：元素的个数</p></blockquote><h3 id="3-数组的特点，数组是有序排列的"><a href="#3-数组的特点，数组是有序排列的" class="headerlink" title="3.数组的特点，数组是有序排列的"></a>3.数组的特点，数组是有序排列的</h3></li></ol></li><li>数组属于引用数据类型的，数组的元素，既可以是基本数据类型，也可以是引用数据类型的。  </li><li>数组是在内存中开辟一整段连续空间。  </li><li>数组的长度一旦确定，就不能修改。<h3 id="4-如何便利数组"><a href="#4-如何便利数组" class="headerlink" title="4.如何便利数组"></a>4.如何便利数组</h3>① 按照维数：一维数组、二维数组<br>②按照数组元素的类型：基本数据类型元素的数组、引用数据结构的数组       <h3 id="5-一维数组的使用"><a href="#5-一维数组的使用" class="headerlink" title="5.一维数组的使用"></a>5.一维数组的使用</h3></li><li>一维数组的声明和初始化  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//① 一维数组的声明和初始化</span></span><br><span class="line"><span class="built_in">int</span> num;<span class="comment">//声明</span></span><br><span class="line">num = <span class="number">10</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">int</span> id = <span class="number">1001</span>;<span class="comment">//声明+初始化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[ ] ids;<span class="comment">//声明</span></span><br><span class="line"><span class="built_in">int</span> ids1[ ];</span><br><span class="line"><span class="comment">//1.1静 态初始化 数组的初始化和数组的赋值操作同时进行</span></span><br><span class="line">ids = new <span class="built_in">int</span>[ ]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//还有一种方法</span></span><br><span class="line"><span class="built_in">int</span> ids3[ ] =&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//1.2 动态初始化  ：数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">String [ ]names  = new String[ <span class="number">5</span> ];</span><br><span class="line"><span class="comment">// 数组的初始化一旦完成，数组的长度就已经确定</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="如何调用数组的指定位置的元素"><a href="#如何调用数组的指定位置的元素" class="headerlink" title="如何调用数组的指定位置的元素"></a>如何调用数组的指定位置的元素</h3><p>//2. 如何调用数组的指定位置的元素：通过角标的方式调用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//数组的角标（或索引）从<span class="number">0</span>开始的，到数组的长度-<span class="number">1</span>结束。</span><br><span class="line">names[<span class="number">0</span>]=<span class="string">"张三"</span><span class="comment">;</span></span><br><span class="line">names[<span class="number">1</span>]=<span class="string">"张四"</span><span class="comment">;</span></span><br><span class="line">names[<span class="number">2</span>]=<span class="string">"张五"</span><span class="comment">;</span></span><br><span class="line">names[<span class="number">3</span>]=<span class="string">"张六"</span><span class="comment">;</span></span><br><span class="line">names[<span class="number">4</span>]=<span class="string">"张七"</span><span class="comment">;</span></span><br><span class="line">//names[<span class="number">5</span>]=<span class="string">"王八"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><hr><h3 id="如何获取数组的长度"><a href="#如何获取数组的长度" class="headerlink" title="如何获取数组的长度"></a>如何获取数组的长度</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 获取数组的长度：</span></span><br><span class="line"><span class="comment">//属性.length</span></span><br><span class="line">System.<span class="keyword">out</span>.println(ids.<span class="built_in">length</span>);<span class="comment">//4</span></span><br><span class="line">System.<span class="keyword">out</span>.println(names.<span class="built_in">length</span>);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><hr><h3 id="如何遍历数组"><a href="#如何遍历数组" class="headerlink" title="如何遍历数组"></a>如何遍历数组</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.如何便利数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h3><ul><li>数组元素是整型，默认初始化值为0；</li><li>数组元素是浮点型，默认初始化值为0.0；</li><li>数组元素是字符型，默认初始化值是ASCII码为零的字符:’0’或’\u0000’</li><li>数组元素是Boolean型，默认初始化值是：false</li><li>数组元素是字符串型（引用数据类型），默认初始化值是：null<h3 id="数组的内存解析"><a href="#数组的内存解析" class="headerlink" title="数组的内存解析"></a>数组的内存解析</h3><img src="/.com//%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="一维数组的内存解析">       <h3 id="两个简单的数组实例"><a href="#两个简单的数组实例" class="headerlink" title="两个简单的数组实例"></a>两个简单的数组实例</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package at.shuzu.test;</span><br><span class="line"><span class="comment">//电话号码，懂得人自然懂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ArrayTest0</span> &#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="built_in">int</span>[] arr = new <span class="built_in">int</span>[] &#123; <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">int</span>[] index = new <span class="built_in">int</span>[] &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String tel = <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index.length; i++) &#123;</span><br><span class="line">tel += arr[index[i]];</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"联系方式："</span> + tel);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package at.shuzu.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *2. 从键盘输入学生成绩，找出最高分，并输出学生成绩的最高分，并输出学生成绩等级。</span></span><br><span class="line"><span class="comment"> *成绩&gt;=最高分-10 等级为‘A’ </span></span><br><span class="line"><span class="comment"> *成绩&gt;=最高分-20 等级为‘B’ </span></span><br><span class="line"><span class="comment"> *成绩&gt;=最高分-30 等级为‘C’</span></span><br><span class="line"><span class="comment"> *其余等级为‘D’</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 提示：先读入学生人数，根据人数创建int数组，存入学生成绩。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.引用Scanner的jar包</span></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ArrayTest3 &#123;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"><span class="comment">//2.从键盘上输入学生人数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请输入学生人数"</span>);</span><br><span class="line">Scanner scan = <span class="keyword">new</span> <span class="constructor">Scanner(System.<span class="params">in</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> j = scan.next<span class="constructor">Int()</span>;</span><br><span class="line"><span class="comment">//3.获取数组个数</span></span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> cj = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请输入"</span> + j + <span class="string">"个学生成绩："</span>);</span><br><span class="line"><span class="comment">//4. 遍历数组长度，给数组赋值</span></span><br><span class="line">for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cj.length; i++) &#123;</span><br><span class="line">cj<span class="literal">[<span class="identifier">i</span>]</span> = scan.next<span class="constructor">Int()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.获取数组的最大值</span></span><br><span class="line"><span class="built_in">int</span> maxcj = cj<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">for(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;cj.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(maxcj&lt;cj<span class="literal">[<span class="identifier">i</span>]</span>)&#123;</span><br><span class="line">maxcj=cj<span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"最高分为"</span>+maxcj);</span><br><span class="line"><span class="comment">//6.根据每个学生成绩和最高分的差值，得到每个学生的等级，并输出等级和成绩。</span></span><br><span class="line">for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; cj.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(maxcj-cj<span class="literal">[<span class="identifier">i</span>]</span>&lt;=<span class="number">10</span>)</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"个成绩为："</span>+cj<span class="literal">[<span class="identifier">i</span>]</span>+<span class="string">"，等级为'A'"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxcj-cj<span class="literal">[<span class="identifier">i</span>]</span>&lt;=<span class="number">20</span>)</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"个成绩为："</span>+cj<span class="literal">[<span class="identifier">i</span>]</span>+<span class="string">"，等级为'B'"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxcj-cj<span class="literal">[<span class="identifier">i</span>]</span>&lt;=<span class="number">30</span>)</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"个成绩为："</span>+cj<span class="literal">[<span class="identifier">i</span>]</span>+<span class="string">"，等级为'C'"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"个成绩为："</span>+cj<span class="literal">[<span class="identifier">i</span>]</span>+<span class="string">"，等级为'D'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="一、数组的概念（二维数组）"><a href="#一、数组的概念（二维数组）" class="headerlink" title="一、数组的概念（二维数组）"></a>一、数组的概念（二维数组）</h1><h2 id="1-理解："><a href="#1-理解：" class="headerlink" title="1. 理解："></a>1. 理解：</h2><blockquote><p>对于二维数组的理解，我们可以看作一维数组array1又作为另一个一维数组array2的元素存在。<br> 其实，从底层的运行机制来看，其实没有多维数组。</p></blockquote><h2 id="2-二维数组的使用"><a href="#2-二维数组的使用" class="headerlink" title="2.  二维数组的使用"></a>2.  二维数组的使用</h2><h3 id="①-二维数组的声明和初始化"><a href="#①-二维数组的声明和初始化" class="headerlink" title="① 二维数组的声明和初始化"></a>① 二维数组的声明和初始化</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//① 二维数组的声明和初始化</span></span><br><span class="line"><span class="built_in">int</span>[ ] arr = new <span class="built_in">int</span>[ ]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//一维数组</span></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="built_in">int</span>[ ][ ] arr1 = new <span class="built_in">int</span>[ ][ ]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化1</span></span><br><span class="line">String[ ][ ] arr2 = new String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//动态初始化2</span></span><br><span class="line">String[ ][ ] arr3= new String[<span class="number">3</span>][ ];</span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line">String arr4[ ][ ]= new String[<span class="number">3</span>][ ];</span><br><span class="line">String[ ] arr5[ ]= new String[<span class="number">3</span>][ ];</span><br><span class="line"><span class="built_in">int</span>[ ] arr6[ ]= &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="②-如何调用数组的指定位置的元素"><a href="#②-如何调用数组的指定位置的元素" class="headerlink" title="② 如何调用数组的指定位置的元素"></a>② 如何调用数组的指定位置的元素</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//② 如何调用数组的指定位置的元素</span></span><br><span class="line">System.<span class="keyword">out</span>.println(arr1[<span class="number">0</span>][<span class="number">2</span>]);<span class="comment">//2</span></span><br><span class="line">System.<span class="keyword">out</span>.println(arr2[<span class="number">2</span>][<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line">arr3[<span class="number">1</span>] =new String[<span class="number">4</span>];</span><br><span class="line">System.<span class="keyword">out</span>.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h3 id="③-如何获取数组的长度"><a href="#③-如何获取数组的长度" class="headerlink" title="③ 如何获取数组的长度"></a>③ 如何获取数组的长度</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//③ 如何获取数组的长度</span></span><br><span class="line">System.<span class="keyword">out</span>.println(arr1.<span class="built_in">length</span>);<span class="comment">//3</span></span><br><span class="line">System.<span class="keyword">out</span>.println(arr1[<span class="number">1</span>].<span class="built_in">length</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="④-如何遍历数组"><a href="#④-如何遍历数组" class="headerlink" title="④ 如何遍历数组"></a>④ 如何遍历数组</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//④ 如何遍历数组</span></span><br><span class="line"><span class="comment">//- 嵌套for循环</span></span><br><span class="line">for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;arr1.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">for(<span class="built_in">int</span> j = <span class="number">0</span>;j &lt;arr1<span class="literal">[<span class="identifier">i</span>]</span>.length;j++)&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(arr1<span class="literal">[<span class="identifier">i</span>]</span><span class="literal">[<span class="identifier">j</span>]</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑤-数组元素的默认初始化值"><a href="#⑤-数组元素的默认初始化值" class="headerlink" title="⑤ 数组元素的默认初始化值"></a>⑤ 数组元素的默认初始化值</h3><ul><li>初始化默认二维的第一层是嵌套的一个一维数组，所以默认值为null，第二层根据定义的类型判定，和一维数组一样<h3 id="⑥-数组的内存解析"><a href="#⑥-数组的内存解析" class="headerlink" title="⑥ 数组的内存解析"></a>⑥ 数组的内存解析</h3><img src="/.com//%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="二维数组内存解析"><h1 id="具体使用案例"><a href="#具体使用案例" class="headerlink" title="具体使用案例"></a>具体使用案例</h1><h2 id="数组的赋值和复制、最大值、最小值、总和、平均值"><a href="#数组的赋值和复制、最大值、最小值、总和、平均值" class="headerlink" title="数组的赋值和复制、最大值、最小值、总和、平均值"></a>数组的赋值和复制、最大值、最小值、总和、平均值</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Array2</span> = Array1</span><br></pre></td></tr></table></figure></li><li>执行此操作，是相当于在栈中创建Array2，然后让它指向的Array1的地址，并没有在堆空间开辟内存<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="built_in">int</span> [ ] <span class="built_in">array</span>1,<span class="built_in">array</span>2;</span><br><span class="line"><span class="comment">//给数组赋值</span></span><br><span class="line"><span class="built_in">array</span>1 = new <span class="built_in">int</span> [ ]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="comment">//遍历array1</span></span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="string">"array1:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i= <span class="number">0</span>;i&lt;<span class="built_in">array</span>1.length;i++)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="built_in">array</span>1[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println( );</span><br><span class="line"><span class="comment">//array2=array1</span></span><br><span class="line"><span class="built_in">array</span>2=<span class="built_in">array</span>1;</span><br><span class="line"><span class="comment">//不属于数组的复制操作</span></span><br><span class="line"><span class="comment">//(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i= <span class="number">0</span>;i&lt;<span class="built_in">array</span>2.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i% <span class="number">2</span>== <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">array</span>2[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印array1</span></span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="built_in">array</span>1[i]+<span class="string">"\t"</span>);<span class="comment">//array1被改变了</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * array2=array1执行这个操作后相当于让array2的地址也指向&#123;2,3,5,7,11,13,17,19&#125;</span></span><br><span class="line"><span class="comment">所以更改后，array1和array2的值都改变。</span></span><br><span class="line"><span class="comment">（new出现后才会创建另一个数组）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3></li><li>需要在堆空间开辟一块新的内存<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="built_in">int</span> [ ] <span class="built_in">array</span>1,<span class="built_in">array</span>2;</span><br><span class="line"><span class="built_in">array</span>1 = new <span class="built_in">int</span> [ ]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="string">"array1:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i= <span class="number">0</span>;i&lt;<span class="built_in">array</span>1.length;i++)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="built_in">array</span>1[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println( );</span><br><span class="line"><span class="comment">//真正的复制</span></span><br><span class="line">  <span class="built_in">array</span>2 = new <span class="built_in">int</span>[<span class="built_in">array</span>1.length];</span><br><span class="line"> System.<span class="keyword">out</span>.print(<span class="string">"array2:"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j&lt; <span class="built_in">array</span>2.length;j++)&#123;</span><br><span class="line"><span class="built_in">array</span>2[j] = <span class="built_in">array</span>1[j];</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="built_in">array</span>2[j]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的最大值、最小值、总和、平均值"><a href="#数组的最大值、最小值、总和、平均值" class="headerlink" title="数组的最大值、最小值、总和、平均值"></a>数组的最大值、最小值、总和、平均值</h2></li><li>案例：生成一个随机数，计算他们的最大值最大值、最小值、总和、平均值<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="type">int</span>[] number1=<span class="built_in">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">//生成随机数</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;number1.length;i++)&#123;</span><br><span class="line">           number1[i] = (<span class="type">int</span>)(Math.random()*(<span class="number">99</span><span class="number">-10</span> + <span class="number">1</span>)+<span class="number">10</span>);</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.print(number1[i]+"  ");</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">//最大值</span><br><span class="line"><span class="type">int</span> <span class="keyword">maxvalue</span>=number1[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;number1.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">maxvalue</span>&lt; number1[i])</span><br><span class="line"><span class="keyword">maxvalue</span>=number1[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println("最大值为："+<span class="keyword">maxvalue</span>);</span><br><span class="line">//最小值</span><br><span class="line">int <span class="keyword">minvalue</span>=number1[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;number1.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">minvalue</span>&gt; number1[i])</span><br><span class="line"> <span class="keyword">minvalue</span>=number1[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println("最小值为："+ <span class="keyword">minvalue</span>);</span><br><span class="line">int sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;number1.length;i++)&#123;</span><br><span class="line">sum+=number1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("总和为："+ sum);</span><br><span class="line"><span class="type">int</span> avgvalue = sum/number1.length;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("平均值为："+avgvalue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2></li><li>十大排序方法<br><img src="/.com//%E6%8E%92%E5%BA%8F.png" alt="排序"><ul><li>冒泡排序：将一列数组两两比较，较大得那个放在最后，再比较，找出第二大的数，以此类推<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">/* System.out.print("请输个数:");</span></span><br><span class="line"><span class="comment">Scanner scan = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">int i =scan.nextInt();*/</span></span><br><span class="line"><span class="built_in">int</span>[ ] number=new <span class="built_in">int</span>[ ]&#123;<span class="number">2</span>,<span class="number">-5</span>,<span class="number">10</span>,<span class="number">70</span>,<span class="number">199</span>,<span class="number">-70</span>,<span class="number">500</span>&#125;;</span><br><span class="line"><span class="comment">/*for (int j =0;j&lt;i;j++)&#123;</span></span><br><span class="line"><span class="comment">      System.out.print("请输入第"+j+"个数");</span></span><br><span class="line"><span class="comment">      number[j]=scan.nextInt();</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      System.out.println();*/</span></span><br><span class="line"><span class="comment">//总共要进行number.length回合比较</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="built_in">int</span> k = <span class="number">0</span>;k&lt;number.length;k++)&#123;</span><br><span class="line">      <span class="comment">//每个回合进行number.length-1-k次比较</span></span><br><span class="line">      <span class="keyword">for</span>( <span class="built_in">int</span> l = <span class="number">0</span> ; l&lt;number.length<span class="number">-1</span>-k;l++)&#123;</span><br><span class="line">      <span class="comment">//两个相邻数之间进行比较，较大的数放在后面</span></span><br><span class="line">      <span class="keyword">if</span> (number[l]&gt;number[l+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="built_in">int</span> temp = number[l];</span><br><span class="line">      number[l]=number[l+<span class="number">1</span>];</span><br><span class="line">      number[l+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;     </span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//遍历数组</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;number.length;i++)&#123;</span><br><span class="line">      System.<span class="keyword">out</span>.print(number[i]+<span class="string">" "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>快速排序<br>“AA”,”BB”,”CC”,”DD”,”EE”,”FF”,”GG”讲这个数列反转<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span>[ ] arr = <span class="keyword">new</span> <span class="keyword">String</span>[ ]&#123;<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>,<span class="string">"DD"</span>,<span class="string">"EE"</span>,<span class="string">"FF"</span>,<span class="string">"GG"</span>&#125;;</span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">String</span> temp = arr[i];</span><br><span class="line">arr[i]=arr[arr.length - i <span class="number">-1</span>];</span><br><span class="line">arr[arr.length - i <span class="number">-1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(arr[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j=arr.length<span class="number">-1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line"><span class="keyword">String</span> temp = arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(arr[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>();</span><br></pre></td></tr></table></figure><h3 id="数组的线性查找"><a href="#数组的线性查找" class="headerlink" title="数组的线性查找"></a>数组的线性查找</h3></li><li>线性查找，按照顺序一个个对比,其时间复杂度为O(n)。<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span>[ ] arr = <span class="keyword">new</span> <span class="keyword">String</span>[ ]&#123;<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>,<span class="string">"DD"</span>,<span class="string">"EE"</span>,<span class="string">"FF"</span>,<span class="string">"GG"</span>&#125;;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(arr[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>();</span><br><span class="line"><span class="comment">//线性查找</span></span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="literal">true</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"请输入需要查找的元素："</span>);</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line"><span class="keyword">String</span> dest =scan.next();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (dest.equals(arr[i]))&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"找到了指定的元素，位置为："</span>+i);</span><br><span class="line">isFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag==<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"很遗憾，没有找到"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>二分法查找:每次对半查找，如果被查的数大于中间的值，则在右半边查找；反之，则在左边，其时间复杂度为O(logn).<br>前提：所查找的数组是有序的<br>有序数组<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="built_in">int</span>[] arr = new <span class="built_in">int</span>[] &#123; <span class="number">-23</span>, <span class="number">-15</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">100</span>, <span class="number">150</span> &#125;;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"请输入需要查找的元素："</span>);</span><br><span class="line">Scanner scan = new Scanner(System.<span class="keyword">in</span>);</span><br><span class="line"><span class="built_in">int</span> dest1 = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> head = <span class="number">0</span>; <span class="comment">// 首元素</span></span><br><span class="line"><span class="built_in">int</span> end = arr.length - <span class="number">1</span>; <span class="comment">// 末元素</span></span><br><span class="line"><span class="built_in">bool</span>ean isFalg1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (head &lt;= end) &#123;</span><br><span class="line"><span class="built_in">int</span> middle = (head + end) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dest1 == arr[middle]) &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"找到了指定的元素，位置为："</span> + middle);</span><br><span class="line">isFalg1 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dest1 &lt; arr[middle]) &#123;</span><br><span class="line">end = middle <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dest1 &gt; arr[middle]) &#123;</span><br><span class="line">head = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFalg1==<span class="literal">true</span>) &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"很遗憾，没有找到"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组的反转和查找"><a href="#数组的反转和查找" class="headerlink" title="数组的反转和查找"></a>数组的反转和查找</h2><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><ul><li>写一个杨辉数组<br>yanghui[i][j]=yanghui[i-1][j]+yanghui[i-1][j-1]<br>输出一个十行的杨辉数组<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">yanghuiTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">//1.  先声明并初始化数组</span></span><br><span class="line"><span class="built_in">int</span> yanghui[][] =new <span class="built_in">int</span>[<span class="number">10</span>][ ];</span><br><span class="line"><span class="comment">//2. 给数组赋值</span></span><br><span class="line"><span class="comment">//2.1 给每行的首个和末尾元素赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;yanghui.length;i++)&#123;</span><br><span class="line">yanghui[i]=new <span class="built_in">int</span> [i+<span class="number">1</span>];</span><br><span class="line">yanghui[i][<span class="number">0</span>] =yanghui[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.2 给每行非首末元素赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;yanghui.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">1</span>;j&lt;yanghui[i].length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">yanghui[i][j]=yanghui[i<span class="number">-1</span>][j]+yanghui[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;yanghui.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j&lt;yanghui[i].length;j++)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(yanghui[i][j]+<span class="string">"    "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Array-工具类的使用（常用的几个工具）"><a href="#Array-工具类的使用（常用的几个工具）" class="headerlink" title="Array 工具类的使用（常用的几个工具）"></a>Array 工具类的使用（常用的几个工具）</h1><h3 id="1-Boolean-equals-int-a-int-b-判断两个数组是否相等"><a href="#1-Boolean-equals-int-a-int-b-判断两个数组是否相等" class="headerlink" title="1. Boolean equals(int[] a,int[] b):判断两个数组是否相等"></a>1. Boolean equals(int[] a,int[] b):判断两个数组是否相等</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Boolean equals(int[] a,int[] b):判断两个数组是否相等</span></span><br><span class="line"><span class="built_in">int</span> [] arr1 =new <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> [] arr2 =new <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> [] arr3 =new <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">bool</span>ean isfalg = Arrays.equals(arr1, arr2);</span><br><span class="line"><span class="built_in">bool</span>ean isEquals=Arrays.equals(arr1, arr3);</span><br><span class="line">System.<span class="keyword">out</span>.println(isfalg);<span class="comment">//true</span></span><br><span class="line">System.<span class="keyword">out</span>.println(isEquals);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="2-String-to-String-int-a-输出数组信息"><a href="#2-String-to-String-int-a-输出数组信息" class="headerlink" title="2. String to String(int[] a):输出数组信息"></a>2. String to String(int[] a):输出数组信息</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arr1</span>)</span>);<span class="comment">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="3-void-fill-int-a-int-val-将特定值填充到数组之中。"><a href="#3-void-fill-int-a-int-val-将特定值填充到数组之中。" class="headerlink" title="3. void fill{int[] a,int val }:将特定值填充到数组之中。"></a>3. void fill{int[] a,int val }:将特定值填充到数组之中。</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>fill(arr1, <span class="number">10</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arr1</span>)</span>);<span class="comment">//[10, 10, 10, 10]</span></span><br></pre></td></tr></table></figure><h3 id="4-void-sort-int-a-对数组进行排序"><a href="#4-void-sort-int-a-对数组进行排序" class="headerlink" title="4.void sort(int[] a):对数组进行排序"></a>4.void sort(int[] a):对数组进行排序</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(arr3);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arr3</span>)</span>);<span class="comment">//[1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="5-int-binary-Search-int-a-int-key-对排序后的数组进行二分法检索指定的值。"><a href="#5-int-binary-Search-int-a-int-key-对排序后的数组进行二分法检索指定的值。" class="headerlink" title="5. int binary Search(int[] a,int key):对排序后的数组进行二分法检索指定的值。"></a>5. int binary Search(int[] a,int key):对排序后的数组进行二分法检索指定的值。</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> arr4 =<span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[]</span>&#123;-<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,-<span class="number">200</span>,<span class="number">987</span>,<span class="number">400</span>&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(arr4);<span class="comment">//[-200, -10, 4, 6, 8, 9, 400, 987]</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">arr4</span>)</span>);</span><br><span class="line"><span class="built_in">int</span> a = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">arr4</span>, -10)</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">arr4</span>, 0)</span>;</span><br><span class="line"><span class="comment">//如果检索不到，就会输出负数,可以写个if语句判断是否大于等于0</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(a);<span class="comment">//1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(b);<span class="comment">//-3</span></span><br></pre></td></tr></table></figure><h1 id="数组中常见的异常"><a href="#数组中常见的异常" class="headerlink" title="数组中常见的异常"></a>数组中常见的异常</h1><h3 id="1-数组的角标越界异常-ArrayIndexOutOfBoundsException"><a href="#1-数组的角标越界异常-ArrayIndexOutOfBoundsException" class="headerlink" title="1. 数组的角标越界异常:ArrayIndexOutOfBoundsException"></a>1. 数组的角标越界异常:ArrayIndexOutOfBoundsException</h3></li><li>角标超过数组定义的最大值，或者角标为负数<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">//1. 数组的角标越界异常:ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="built_in">int</span>[] arr = new <span class="built_in">int</span> []&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span> ;i&lt;=arr.length;i++)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr.length=5,a[5]不存在，所以会出现角标越界</span></span><br><span class="line">System.<span class="keyword">out</span>.println(arr[<span class="number">-2</span>]);<span class="comment">//指针为负数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空指针异常：NullPointerExpection"><a href="#空指针异常：NullPointerExpection" class="headerlink" title="空指针异常：NullPointerExpection"></a>空指针异常：NullPointerExpection</h3></li><li>定义为null<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="built_in">int</span>[] arr = new <span class="built_in">int</span> []&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] arr1 = new <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">arr1 = <span class="literal">null</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(arr1[<span class="number">0</span>]);<span class="comment">//空指针</span></span><br><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="built_in">int</span>[] [] arr2 = new <span class="built_in">int</span> [<span class="number">4</span>][];</span><br><span class="line">System.<span class="keyword">out</span>.println(arr2[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java练习-家庭收支</title>
      <link href="/2020/04/05/Java%E7%BB%83%E4%B9%A0-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF/"/>
      <url>/2020/04/05/Java%E7%BB%83%E4%B9%A0-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="家庭收支程序"><a href="#家庭收支程序" class="headerlink" title="家庭收支程序"></a>家庭收支程序</h1><a id="more"></a><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Familyaccount &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args)&#123;</span><br><span class="line">        <span class="type">boolean</span> isfalg = <span class="keyword">true</span>;</span><br><span class="line">        <span class="type">int</span> Account = <span class="number">10000</span>;</span><br><span class="line">        String SZ = "收支\t账户金额\t收支金额\t说    明\n";</span><br><span class="line">        <span class="keyword">while</span>(isfalg)&#123;</span><br><span class="line">            //界面</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------收支系统------------");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("           1. 添加收入：");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("           2. 添加支出：");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("           3. 账户查询：");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("           4. 退   出");</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print("           请输入您的操作(1-4)：");</span><br><span class="line">            //获取类，从键盘输入选择功能</span><br><span class="line">            <span class="type">char</span> number= Utility.readMenuSelection();</span><br><span class="line">            //功能实现</span><br><span class="line">            switch (number)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------登记收入------------");</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.print("添加收入:");</span><br><span class="line">                    <span class="type">int</span> makemoney = Utility.readNumber();</span><br><span class="line">                    Account+=makemoney;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.print("收入说明：");</span><br><span class="line">                    String readSR =Utility.readString();</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("当前账户余额:"+Account);</span><br><span class="line">                    SZ = SZ+"收入：\t"+Account+"\t\t"+makemoney+"\t\t\t"+readSR+"\n";</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------登记完成------------");</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------登记支出------------");</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.print("添加支出:");</span><br><span class="line">                    <span class="type">int</span> paymoney = Utility.readNumber();</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.print("收入说明：");</span><br><span class="line">                    String readZC =Utility.readString();</span><br><span class="line">                    Account -=paymoney;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("当前账户余额:"+Account);</span><br><span class="line">                    SZ = SZ+"收入：\t"+Account+"\t\t"+paymoney+"\t\t\t"+readZC+"\n";</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------登记完成------------");</span><br><span class="line">                    break;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------账户明细------------");</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println(SZ);</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("----------------完成-------------");</span><br><span class="line">                    break;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------退出------------");</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.print("确定要退出吗?(Y/N)");</span><br><span class="line">                    <span class="type">char</span> TC = Utility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span> (TC == <span class="string">'Y'</span>)&#123;</span><br><span class="line">                        isfalg = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utility</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Utility</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> var1 = readKeyBoard(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">char</span> var0 = var1.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(var0 == <span class="number">49</span> || var0 == <span class="number">50</span> || var0 == <span class="number">51</span> || var0 == <span class="number">52</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> var0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"选择错误，请重新输入："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> var1 = readKeyBoard(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> var0 = Integer.<span class="built_in">parseInt</span>(var1);</span><br><span class="line">                <span class="keyword">return</span> var0;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException var3) &#123;</span><br><span class="line">                System.out.<span class="built_in">print</span>(<span class="string">"数字输入错误，请重新输入："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">readString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> var0 = readKeyBoard(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> var0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> var1 = readKeyBoard(<span class="number">1</span>).toUpperCase();</span><br><span class="line">            <span class="keyword">char</span> var0 = var1.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(var0 == <span class="string">'Y'</span> || var0 == <span class="string">'N'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> var0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"选择错误，请重新输入："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> var1 = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">            var1 = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(var1.length() &gt;= <span class="number">1</span> &amp;&amp; var1.length() &lt;= var0) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"输入长度（不大于"</span> + var0 + <span class="string">"）错误，请重新输入："</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 家庭收支 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-循环语句</title>
      <link href="/2020/04/01/java%E5%9F%BA%E7%A1%80-%E5%BE%AA%E7%8E%AF/"/>
      <url>/2020/04/01/java%E5%9F%BA%E7%A1%80-%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><a id="more"></a><h2 id="for-循环的使用"><a href="#for-循环的使用" class="headerlink" title="for 循环的使用"></a>for 循环的使用</h2><h3 id="循环结构的4个要素"><a href="#循环结构的4个要素" class="headerlink" title="循环结构的4个要素"></a>循环结构的4个要素</h3><ol><li>初始化条件</li><li>循环条件 –&gt;Boolean类型</li><li>循环体</li><li>迭代条件<h3 id="for循环的结构"><a href="#for循环的结构" class="headerlink" title="for循环的结构"></a>for循环的结构</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="number">1</span> ; <span class="number">2</span> ; <span class="number">4</span>)&#123;  </span><br><span class="line">    <span class="number">3</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>执行过程：1–&gt;2–&gt;3–&gt;4–&gt;2–&gt;3–&gt;4–&gt;…..–&gt;2直到条件不满足，结束循环。<h3 id="while-循环的使用"><a href="#while-循环的使用" class="headerlink" title="while 循环的使用"></a>while 循环的使用</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="keyword">while</span>（<span class="number">2</span>）&#123;</span><br><span class="line">    <span class="number">3</span>；  </span><br><span class="line">    <span class="number">4</span>；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注意：千万不要忽略迭代条件，一旦丢失，很可能导致程序进入死循环。</li><li>for循环和while循环可以相互转换。</li><li>区别 for如果在()中定义了初始条件，则初始条件的变量只能作用于for循环，而while循环定义的初始条件的变量，是全局变量。<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>   </span><br><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line">    <span class="number">3</span>;  </span><br><span class="line">    <span class="number">4</span>;  </span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li>执行过程1–&gt;3–&gt;4–&gt;2–&gt;1–&gt;3–&gt;4–&gt;2…–&gt;2</li><li>do-while循环 至少要执行一次循环体<h2 id="for循环练习"><a href="#for循环练习" class="headerlink" title="for循环练习"></a>for循环练习</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package forTest;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">forTest0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package forTest;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//水仙花</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">forTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">       <span class="comment">/* Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">        System.out.println("请输入一个三位数");</span></span><br><span class="line"><span class="comment">        int num = scanner.nextInt();*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> num = <span class="number">100</span>; num &lt;= <span class="number">999</span>; num++) &#123;</span><br><span class="line">            <span class="built_in">int</span> i = num % <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">int</span> j = num % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">            <span class="built_in">int</span> k = num / <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span> (num==(i*i*i)+(j*j*j)+(k*k*k))&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(num);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> for循环 </tag>
            
            <tag> do while循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基础-条件语句</title>
      <link href="/2020/04/01/java-%E5%9F%BA%E7%A1%80-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/04/01/java-%E5%9F%BA%E7%A1%80-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="java中的条件判断语句"><a href="#java中的条件判断语句" class="headerlink" title="java中的条件判断语句"></a>java中的条件判断语句</h1><a id="more"></a><h2 id="if-esle语句"><a href="#if-esle语句" class="headerlink" title="if-esle语句"></a>if-esle语句</h2><ol><li>if-else结构是可以嵌套的。</li><li>如果if-else结构中的执行语句只有一行，对应的一堆{}可以忽略不写。但是不建议大家省略。<h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><ul><li>从键盘输入三个整型变量num1、num2、num3；对他们进行排序（使用if-else），并从小到大输出。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ifTest &#123;</span><br><span class="line">   <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">       Scanner number = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入第一个数：");</span><br><span class="line">       <span class="type">int</span> num1 = number.nextInt();</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入第二个数：");</span><br><span class="line">       <span class="type">int</span> num2 = number.nextInt();</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入第三个数：");</span><br><span class="line">       <span class="type">int</span> num3 = number.nextInt();</span><br><span class="line">       <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">           <span class="keyword">if</span> (num3 &gt; num1) &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num2 + "," + num1 + "," + num3);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num3 &lt; num2) &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num3 + "," + num2 + "," + num1);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num2 + "," + num3 + "," + num1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (num3 &gt; num2) &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num1 + "," + num2 + "," + num3);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num3 &lt; num1) &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num3 + "," + num1 + "," + num2);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.println(num1 + "," + num3 + "," + num2);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3></li><li>狗狗的年龄和人的年龄不一样，狗的前两年的每一年相当于人类的10.5岁，之后的每一年都相当于人的4岁，假设有一条5岁的狗狗<br>那么它相当于人类年龄=2×10.5+3×4=33，请设计一个程序从键盘输入狗的年龄，计算狗相当于人类的年龄。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ifTest1 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args)&#123;</span><br><span class="line">        Scanner scanner = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入狗的年龄：");</span><br><span class="line">        <span class="type">int</span> age = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(age&lt;=<span class="number">2</span> &amp;&amp; age&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">double</span> peopleage=age*<span class="number">10.5</span>;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("相当于人类年龄："+peopleage+"岁");</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">double</span> peopleage=<span class="number">10.5</span>*<span class="number">2</span>+(<span class="number">4</span>*(age<span class="number">-2</span>));</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("相当于人类年龄："+peopleage+"岁");</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("狗狗年龄不可能为负数");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h3></li><li>随机生成一个两位数作为幸运彩票号码，让用户从键盘输入一个两位数，下面是获奖条件。</li><li>当用户输入的号码和随机生成的号码完全一样，则奖励10 000美元</li><li>当用户输入的号码和随机生成的号码数字一样，但是是顺序不同，奖励3 000美元</li><li>当用户输入的号码和随机生成的号码有一个数字一样，且顺序一样，奖励1 000美元</li><li>当用户输入的号码和随机生成的号码有一个数字一样，但是顺序不一样，奖励500美元。</li><li>其他情况不中奖<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ifTest2 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num1 = (<span class="type">int</span>)(Math.random() * <span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line">        Scanner scanner = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入你的彩票号（必须为两位数）：");</span><br><span class="line">        <span class="type">int</span> peopleNum = scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> num2 = (<span class="type">int</span>) num1 / <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> num3 = (<span class="type">int</span>) num1 % <span class="number">10</span>;</span><br><span class="line">        //<span class="type">int</span> num4 = (<span class="type">int</span>) peopleNum/<span class="number">10</span>;</span><br><span class="line">        //<span class="type">int</span> num5 = (<span class="type">int</span>) peopleNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(peopleNum&gt;=<span class="number">10</span> &amp;&amp; peopleNum&lt;=<span class="number">99</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (peopleNum == num1) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("恭喜你获得10 000美元");</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((peopleNum / <span class="number">10</span>) == num3 &amp;&amp; (peopleNum % <span class="number">10</span>) == num2) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("恭喜你获得3 000美元");</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((peopleNum / <span class="number">10</span>) == num2 || (peopleNum % <span class="number">10</span>) == num3) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("恭喜你获得1 000美元");</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((peopleNum / <span class="number">10</span>) == num3 || (peopleNum % <span class="number">10</span>) == num2) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("恭喜你获得300美元");</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("很遗憾，你没有获奖");</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("中将号码为"+num1);</span><br><span class="line">        &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入一个大于10的两位数的号码");</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h2><ul><li>格式<br>Switch(表达式){<br>  case常量1:<br>   执行语句1；<br>   //break<br>}<br>  case常量2:<br>   执行语句2；<br>   //break<br>}<br>……<br>  default<br>   执行语句n；<br>   //break<br>}   </li><li>说明：</li></ul><ol><li>根据switch表达式中的值，依次匹配各个case当中的常量，一旦匹配成功，则进入case结构中，调用其执行语句。当调用完执行语句后，则仍然继续向下执行其他case结构中的执行语句，知道遇到break关键字或者是switch-擦色结构末尾为止。</li><li>break，可以在使用switch-case结构中，表示一旦执行到此关键字就跳出switch-case结构。</li><li>switch结构中的表达式，只能是如下6种类型之一：byte、short、char、int、枚举类型、 String类型。</li><li>case后面必须是常量，不能是范围</li><li>break 关键字是可选的</li><li>default：相当于if-else结构中的else，也是可选的，位置也是灵活的</li><li>如果switch-case结构中的多个case的执行语句相同，可以考虑合并。</li></ol><ul><li>例题：输入成绩大于等于60，则输出及格，小于60则不及格，用switch-case编程。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">switchTest0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">       Scanner scanner =new Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入你的成绩:"</span>);</span><br><span class="line">        <span class="built_in">int</span> i = scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (i/<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//case 合并使用</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"不及格"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="comment">//更好的方法</span></span><br><span class="line">                  <span class="comment">/*switch (i/60) &#123;</span></span><br><span class="line"><span class="comment">                      case 0:</span></span><br><span class="line"><span class="comment">                          System.out.println("不及格");</span></span><br><span class="line"><span class="comment">                          break;</span></span><br><span class="line"><span class="comment">                      default:</span></span><br><span class="line"><span class="comment">                          System.out.println("及格");</span></span><br><span class="line"><span class="comment">                  &#125;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>练习<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">switchTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">     Scanner scanner = new Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入年："</span>);</span><br><span class="line">        <span class="built_in">int</span> years = scanner.nextInt();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入月："</span>);</span><br><span class="line">        <span class="built_in">int</span> month = scanner.nextInt();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"请输入日："</span>);</span><br><span class="line">        <span class="built_in">int</span> day = scanner.nextInt();</span><br><span class="line">        <span class="built_in">int</span> sumday = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">               sumday+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                sumday+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                sumday+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                sumday+=<span class="number">30</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">//sumday+=29;</span></span><br><span class="line">                <span class="comment">//判断是否是闰年</span></span><br><span class="line">                <span class="keyword">if</span>(years % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; years % <span class="number">100</span> != <span class="number">0</span> || years % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    sumday+=<span class="number">29</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    sumday+=<span class="number">28</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                sumday+=<span class="number">31</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                sumday+=day;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(years+<span class="string">"年"</span>+month+<span class="string">"月"</span>+day+<span class="string">"日是该年的第"</span>+sumday+<span class="string">"天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环和条件语句的嵌套使用"><a href="#循环和条件语句的嵌套使用" class="headerlink" title="循环和条件语句的嵌套使用"></a>循环和条件语句的嵌套使用</h2></li><li>输出一百以内的质数（方法一）<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package zhishu_100;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by li on 2020/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhushu</span> &#123;</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">             <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">                 <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=Math.<span class="built_in">sqrt</span>(i);j++)&#123;<span class="comment">//优化二：缩小范围，</span></span><br><span class="line">                     <span class="keyword">if</span>( i%j==<span class="number">0</span>)&#123;</span><br><span class="line">                         k = <span class="number">1</span>;</span><br><span class="line">                         <span class="keyword">break</span>;<span class="comment">//优一：当输入的数一旦被除尽，就直接跳出。</span></span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">                     System.out.<span class="built_in">println</span>(i);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">long</span> <span class="built_in">end</span> = System.currentTimeMillis();</span><br><span class="line">             System.out.<span class="built_in">println</span>(<span class="string">"时间差"</span>+(<span class="built_in">end</span>-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break和continue的用法"><a href="#break和continue的用法" class="headerlink" title="break和continue的用法"></a>break和continue的用法</h3></li><li>break的用法<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package breakTest1;</span><br><span class="line"><span class="keyword">import</span>  java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">breakTest1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"请输入第一个正整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"请输入第一个正整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> m = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">min</span> = (n&gt;m)?m:n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span>;i&lt;=<span class="built_in">min</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span> &amp;&amp; n%i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"最大公约数为"</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">max</span>=(m&gt;n)?m:n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">max</span>;j&gt;=<span class="built_in">max</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%m==<span class="number">0</span> &amp;&amp; j%n==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"最小公倍数"</span>+j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>continue的用法<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package breakTest1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by li on 2020/4/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break 和 continue的使用</span></span><br><span class="line"><span class="comment">            范围                    作用（不同点）       相同点</span></span><br><span class="line"><span class="comment">break :     switch-case            跳出</span></span><br><span class="line"><span class="comment">            循环结构中               结束当前循环         关键字后面声明的语句编译不通过</span></span><br><span class="line"><span class="comment">continue:   循环结构中               结束档次循环         关键字后面声明的语句编译不通过</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ContinueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//break;//输出123</span></span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//输出123567910</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.print(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="comment">//在嵌套循环中的break和continue</span></span><br><span class="line">        l:<span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j % <span class="number">4</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//break;//结束默认最近的循环  123&lt;br&gt;123 &lt;br&gt;123&lt;br&gt;123</span></span><br><span class="line">                    <span class="comment">//continue;//结束默认最近的循环 123567910&lt;br&gt; 123567910 &lt;br&gt;123567910 &lt;br&gt;123567910</span></span><br><span class="line">                    <span class="comment">//break l;//结束指定循环 123</span></span><br><span class="line">                    <span class="keyword">continue</span> l;<span class="comment">//结束指定循环123123123123</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.<span class="keyword">out</span>.print(j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>100以内的质数-方法二<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package breakTest1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by li on 2020/4/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用continue的方法输出指定数之内的指数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">continueZhiShu</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        label:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=Math.<span class="built_in">sqrt</span>(i);j++) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                     <span class="keyword">continue</span> label;<span class="comment">//一旦被除尽，直接返回到开始位置找下一个。</span></span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">                System.out.<span class="built_in">println</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="built_in">end</span> = System.currentTimeMillis();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"时间差"</span>+(<span class="built_in">end</span>-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> if-else </tag>
            
            <tag> switch-case </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基础-Scanner</title>
      <link href="/2020/03/31/java-%E5%9F%BA%E7%A1%80-Scanner/"/>
      <url>/2020/03/31/java-%E5%9F%BA%E7%A1%80-Scanner/</url>
      
        <content type="html"><![CDATA[<h1 id="Scanner函数从键盘获取不同类型的变量"><a href="#Scanner函数从键盘获取不同类型的变量" class="headerlink" title="Scanner函数从键盘获取不同类型的变量"></a>Scanner函数从键盘获取不同类型的变量</h1><a id="more"></a><ol><li>导包：import java.util.Scanner;</li><li>Scanner的实例化：Scanner = new Scanner(System.in);</li><li>调用Scanner类的相关方法（next（）/nextXxx（））；<h2 id="Scanner从键盘获取"><a href="#Scanner从键盘获取" class="headerlink" title="Scanner从键盘获取"></a>Scanner从键盘获取</h2></li></ol><ul><li>注意：需要根据响应的方法。来输入指定类型的值，如果输入不匹配，程序可能会报错终止<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ScannerTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args)&#123;</span><br><span class="line">        Scanner scan = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入你的姓名：");</span><br><span class="line">        String <span class="type">name</span> = scan.next();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入你的芳龄：");</span><br><span class="line">        <span class="type">int</span> age = scan.nextInt();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入你的体重：");</span><br><span class="line">        <span class="type">double</span> weight = scan.nextDouble();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("你觉得我帅嘛？（true/false）");</span><br><span class="line">        <span class="type">boolean</span> yanzhi = scan.nextBoolean();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("你的名字是："+<span class="type">name</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("你的年龄是："+age);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("你的是体重："+weight);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("我帅吗？"+yanzhi);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Scanner </tag>
            
            <tag> 键盘输入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-运算符</title>
      <link href="/2020/03/29/Java%E5%9F%BA%E7%A1%80-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/03/29/Java%E5%9F%BA%E7%A1%80-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="ava基础篇–运算符"><a href="#ava基础篇–运算符" class="headerlink" title="ava基础篇–运算符"></a>ava基础篇–运算符</h1><a id="more"></a><ul><li>算术运算符</li><li>赋值运算符</li><li>比较运算符(关系运算符)</li><li>逻辑运算符</li><li>位运算符</li><li>三元运算符<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2></li><li>+、-、、*、/、%、(前)++/–、(后)++/–、+（连接符）<h2 id="除运算："><a href="#除运算：" class="headerlink" title="除运算：/"></a>除运算：/</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num1 = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">int</span> num2 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">int</span> result1 = num1 / num2;</span><br><span class="line">System.<span class="keyword">out</span>.println(result1);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> result2 = num1 / num2*num2</span><br><span class="line">System.<span class="keyword">out</span>.println(result1);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> result3 = num1 /num2;</span><br><span class="line">System.<span class="keyword">out</span>.println(result3);<span class="comment">//2.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> result4 = num1 / num2 + <span class="number">0.0</span>;<span class="comment">//2.0</span></span><br><span class="line"><span class="built_in">double</span> result5 = num1 / (num2 + <span class="number">0.0</span>);<span class="comment">//2.4</span></span><br><span class="line">System.<span class="keyword">out</span>.println(result5);</span><br></pre></td></tr></table></figure></li></ul><h2 id="取余运算："><a href="#取余运算：" class="headerlink" title="取余运算：%"></a>取余运算：%</h2><ul><li>结果的符号与被模数的符号相同<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> m1 = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">int</span> n1 = <span class="number">5</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"m1%n1"</span> + m1 % n1);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> m2 = <span class="number">-12</span>;</span><br><span class="line"><span class="built_in">int</span> n2 = <span class="number">5</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"m2%n2"</span> + m1 % n1);<span class="comment">//-2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> m3 = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">int</span> n3 = <span class="number">-5</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"m3%n3"</span> + m3 % n3);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> m4 = <span class="number">-12</span>;</span><br><span class="line"><span class="built_in">int</span> n5 = <span class="number">-5</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"m4%n4"</span> + m4 % n4);<span class="comment">//-2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="前-、后"><a href="#前-、后" class="headerlink" title="前++、后++"></a>前++、后++</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">int</span> <span class="built_in">a1</span> = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">int</span> <span class="keyword">b1 </span>= ++a<span class="comment">;</span></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="string">"a1 = "</span> + <span class="built_in">a1</span> +<span class="string">",b1 = "</span> + <span class="keyword">b1);</span></span><br><span class="line"><span class="keyword">//a1 </span>= <span class="number">11</span>,<span class="keyword">b1 </span>= <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">int</span> <span class="built_in">a2</span> = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">int</span> <span class="keyword">b2 </span>= a++<span class="comment">;</span></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="string">"a2 = "</span> + <span class="built_in">a2</span> +<span class="string">",b2 = "</span> + <span class="keyword">b2);</span></span><br><span class="line"><span class="keyword">//a2 </span>= <span class="number">11</span>,<span class="keyword">b1 </span>= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">//注意</span><br><span class="line"><span class="symbol">short</span> <span class="built_in">s1</span> = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">s1</span> = <span class="built_in">s1</span> + <span class="number">1</span><span class="comment">;//编译失败</span></span><br><span class="line"><span class="symbol">s1</span> = (folat)(<span class="built_in">s1</span> + <span class="number">1</span>)<span class="comment">;//强转</span></span><br><span class="line"><span class="symbol">s1</span>++<span class="comment">;//自增1</span></span><br><span class="line"></span><br><span class="line">//问：</span><br><span class="line"><span class="keyword">byte </span><span class="keyword">bb1 </span>= <span class="number">127</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">bb1++;</span></span><br><span class="line"><span class="keyword">System.out.println("bb1 </span>= <span class="string">"+bb1);</span></span><br><span class="line"><span class="string">//-128(进制转换)</span></span><br></pre></td></tr></table></figure><ul><li>前++，先自增1，再运算</li><li>后++，先运算，再自增1<h3 id="前–、后–相同"><a href="#前–、后–相同" class="headerlink" title="前–、后–相同"></a>前–、后–相同</h3></li><li>前–，先自减1，再运算</li><li>后–，先运算，再自减1<h2 id="赋值运算：比较运算符"><a href="#赋值运算：比较运算符" class="headerlink" title="赋值运算：比较运算符"></a>赋值运算：比较运算符</h2></li><li>=、+=、-=、*=、/=、%=<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> j1 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> j2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//连续赋值</span></span><br><span class="line"><span class="built_in">int</span> i2,j2;</span><br><span class="line">i2 = j2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> i3 = <span class="number">10</span>,j3 = <span class="number">10</span></span><br><span class="line"><span class="comment">//********************</span></span><br><span class="line"><span class="comment">//+=(-=类似)</span></span><br><span class="line"><span class="built_in">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"> num1 +=<span class="number">2</span>;<span class="comment">//num1=num1+2</span></span><br><span class="line"> System.<span class="keyword">out</span>.println(num1);<span class="comment">//12</span></span><br><span class="line"> <span class="comment">//%=</span></span><br><span class="line"><span class="built_in">int</span> num2 = <span class="number">12</span>;</span><br><span class="line"> num2 %= <span class="number">5</span>;<span class="comment">//num2 = num2 % 5</span></span><br><span class="line"> System.<span class="keyword">out</span>.println(num2);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//*=</span></span><br><span class="line"><span class="built_in">int</span> num3 = <span class="number">10</span>;</span><br><span class="line"> num3 *= <span class="number">5</span>;<span class="comment">//num3 = num3 * 5</span></span><br><span class="line"> System.<span class="keyword">out</span>.println(num3);<span class="comment">//50</span></span><br><span class="line"> <span class="comment">//  /=</span></span><br><span class="line"> <span class="built_in">int</span> num4 = <span class="number">10</span>;</span><br><span class="line"> num4 /= <span class="number">5</span>;<span class="comment">//num4 = num4 / 5</span></span><br><span class="line"> System.<span class="keyword">out</span>.println(num4);<span class="comment">//12</span></span><br><span class="line"> <span class="comment">// 注意，如果定义为short、char、byte类型，用‘//’后面的的需要强转，‘//’前的方法则不需要。例如：</span></span><br><span class="line"> short s1 = <span class="number">10</span>;</span><br><span class="line"> s1=s1+<span class="number">2</span>;<span class="comment">//编译失败，因为常量2默认为int类型。</span></span><br><span class="line"> s1 +=<span class="number">2</span>;<span class="comment">//不会改变数据类型，通常使用这种方式。</span></span><br><span class="line"> System.<span class="keyword">out</span>.println(s1);</span><br></pre></td></tr></table></figure></li><li>思考<pre><code>int i=1; i*=0.1;System.out.println(i)// 结果为0 i++;System.out.println(i)//  结果为1</code></pre></li><li>因为int是整形，输出结果为整形，小数部分截断。<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2></li><li>运算符：<ul><li>==：相等于</li><li>!=：不等于</li><li>&lt;：小于</li><li>‘&gt;’：大于</li><li>&lt;==：小于等于</li><li>‘&gt;==’：大于等于  <blockquote><p>比较运算符运算后的结果是Boolean型，结果只能是true或者false。  </p></blockquote></li></ul></li></ul><p><img src="/.com//%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="比较运算符"></p><h2 id="逻辑运算符（只能用于Boolean型）"><a href="#逻辑运算符（只能用于Boolean型）" class="headerlink" title="逻辑运算符（只能用于Boolean型）"></a>逻辑运算符（只能用于Boolean型）</h2><ul><li>&amp;–逻辑与、&amp;&amp;短路与：全真为真     <ul><li><ol><li>相同点1：两者运算结果相同 </li></ol></li><li><ol start="2"><li>相同点2：当符号的左边是true时，两者都执行右边的运算</li></ol></li><li><ol start="3"><li>不同点：当符号左边是false时，&amp;继续执行右边的运算，&amp;&amp;不执行右边运算</li></ol></li></ul></li><li>|–逻辑或、||短路或：有真为真<ul><li><ol><li>相同点1：两者运算结果相同</li></ol></li><li><ol start="2"><li>相同点2：当符号左边为false时，两者都执行右边</li></ol></li><li><ol start="3"><li>不同点：当符号左边为true时，|执行右边，而||不再执行右边。<blockquote><p>开发中推荐使用短路与和短路或（“&amp;&amp;”、“||”）</p></blockquote></li></ol></li></ul></li><li>！–逻辑非：真变为假，假变为真 </li><li>^ –逻辑异或：真假为真，真真为假，假假为假<h2 id="位运算符-使用比较少"><a href="#位运算符-使用比较少" class="headerlink" title="位运算符(使用比较少)"></a>位运算符(使用比较少)</h2></li><li>操作的都是整型的数据<h3 id="‘-lt-lt-’-左移运算符"><a href="#‘-lt-lt-’-左移运算符" class="headerlink" title="‘&lt;&lt;’ 左移运算符"></a>‘&lt;&lt;’ 左移运算符</h3>3&lt;&lt;2=12–&gt;3<em>2</em>2=12   <blockquote><p>例如:4的二进制数为0000 0100<br> 4&lt;&lt;2 : 左移两位:0001 0000=16;</p></blockquote></li><li>运算法则：变为二进制数，向左移两位，后面补零，所以移一位就乘以一个2，移几位乘以几个2.<h3 id="‘-gt-gt-gt-’右移"><a href="#‘-gt-gt-gt-’右移" class="headerlink" title="‘&gt;&gt;&gt;’右移"></a>‘&gt;&gt;&gt;’右移</h3></li><li>也是相同的，每移一位，就除以一个2.</li><li>正数右移，最高位补0</li><li>负数右移，最高位补1<h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3></li><li>被移位二进制最高位无论是0或者1，空位都用0补.<h3 id="逻辑-amp-、-、-、"><a href="#逻辑-amp-、-、-、" class="headerlink" title="逻辑&amp;、|、^、~"></a>逻辑&amp;、|、^、~</h3></li><li>将运算的的数写为二进制，对每一位二进制数进行&amp;、|、^运算。<br>例如：12 &amp; 5 = 4   <pre><code>0000 1100  12       0000 0101  5  ----------------   0000 0100  4    </code></pre></li><li>~:取反,,进行取反运算符号位也要取反 <blockquote><p>正数取反，各二进制码按补码各位取反<br>负数取反，各二进制码按补码各位取反  </p></blockquote></li></ul><p>例如：0000 0000 0000 0000 0110<br>取反：1111 1111 1111 1111 1001，取反后为-7<br><strong>使用较少</strong></p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>格式：（条件表达式)?表达式1：表达式2;</li><li>条件表达式的结果为Boolean类型；</li><li>当条件表达式为true，运算?后的表达式1；</li><li>当条件表达式为false，运算:后的表达式2.</li><li>表达式1和表达式2为<strong>同种类型</strong><br><strong>例如：表达式1为int，表达式2为String，编译会出错</strong> </li><li>三元运算符可以嵌套<br>比如：（条件表达式1）?表达式1:((条件表达式2)?表达式2：表达式3)<blockquote><p>三元运算符与if-else的联系与区别：</p></blockquote></li></ul><ol><li>三元运算符可以简化为if-else语句；  </li><li>三元运算符要求必须返回一个结果;</li><li>if后的代码块可以有多个语句。<br>###运算符得优先级</li></ol><ul><li>运算符呦不同的优先级，所谓优先级就是表达式运算中的运算顺序，按照运算的优先级如下表：<br><img src="/.com//%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="优先级"></li><li>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-变量</title>
      <link href="/2020/03/28/Java%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F/"/>
      <url>/2020/03/28/Java%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><a id="more"></a><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><blockquote><p>内存中的一个存储区域<br>该区域可以在同一类型范围内不断变化<br>变量是程序中最基本的存储单元，包含<strong>变量类型、变量名和存储的值</strong></p></blockquote><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><blockquote><p>用于在内存中保存数据</p></blockquote><h2 id="使用变量的注意："><a href="#使用变量的注意：" class="headerlink" title="使用变量的注意："></a>使用变量的注意：</h2><blockquote><ol><li><strong>Java中每个变量必须先声明，后使用</strong></li><li>使用变量名来访问这块区域的数据</li><li>变量的作用域：其定义所在的一对{}内</li><li>变量只有在其作用域内才有效</li><li>同一个作用域内，不能定义重名的变量</li></ol></blockquote><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ul><li>Java的定义变量的格式： 数据类型 变量名 = 变量值； </li><li>先定义，再使用。</li><li>变量没有定义默认值无法直接输出<br>例如：<br><code>int  myage = 12;</code><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int myNumber<span class="comment">; </span></span><br><span class="line"><span class="attribute">myNumber</span> = <span class="number">1001</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="定义变量的数据类型"><a href="#定义变量的数据类型" class="headerlink" title="定义变量的数据类型"></a>定义变量的数据类型</h2><h3 id="按照数据类型分"><a href="#按照数据类型分" class="headerlink" title="按照数据类型分"></a>按照数据类型分</h3><ul><li>基本数据类型<ul><li>整型类型：byte、short、int、long</li><li>浮点类型：float、double</li><li>字符型：  char</li><li>布尔型：  Boolean</li></ul></li><li>引用数据类型<ul><li>类： （class）</li><li>接口：（interface）</li><li>数组：([])    <h3 id="1、整形变量：byte、short、int、long"><a href="#1、整形变量：byte、short、int、long" class="headerlink" title="1、整形变量：byte、short、int、long"></a>1、整形变量：byte、short、int、long</h3></li></ul></li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节=8bit位</td><td>-128~127</td></tr><tr><td>short</td><td>2 字节</td><td>-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td>int</td><td>4 字节</td><td>2<sup>31</sup>~2<sup>31</sup>-1(约21亿)</td></tr><tr><td>long</td><td>8 字节</td><td>2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><hr><p> 声明：long变量结尾必须以“L”或“l”结尾，例如： long l1 = 23124355L或 long l1 = 42142143241l。<br><strong>通常，定义整形变量用int</strong></p><hr><h3 id="2、浮点型变量：float、double"><a href="#2、浮点型变量：float、double" class="headerlink" title="2、浮点型变量：float、double"></a>2、浮点型变量：float、double</h3><ul><li>浮点型：表示带小数点的数值。</li><li>与整数类型类似，Java浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li><li>浮点类型常量由两种表示形式：<blockquote><ol><li>十进制数类型：如：5.12 512.0f  .512(必须有小数点)</li><li>科学计数法形式如下： 5.12E2 512E2 100E-2</li></ol></blockquote></li><li>float：单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。</li><li>double：双精度。精度是float的两倍。通常采用此类型。</li><li>float表示的数值比范围i欸比long还要大</li><li><strong>Java的浮点型常量默认为double型，声明float型常量，须后加上“F”或者“f”。</strong><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table></li></ul><hr><p><strong>使用方法如下：</strong> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">class_02</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">byte b1 = <span class="number">12</span>;</span><br><span class="line">short b2 =<span class="number">128</span>;</span><br><span class="line">        <span class="built_in">int</span> b3 = <span class="number">1234</span>;</span><br><span class="line">        <span class="comment">//long 类型结尾要带“L”或“l”</span></span><br><span class="line">        long b4 = <span class="number">123456679</span>L;</span><br><span class="line">       <span class="built_in">double</span> b5 =<span class="number">1234.56</span>;</span><br><span class="line">       <span class="comment">//通常默认位double，用float的时候要加上“F”或者“f”</span></span><br><span class="line">       <span class="built_in">float</span> b6 = <span class="number">12.23f</span>;</span><br><span class="line">       System.<span class="keyword">out</span>.println(b1);</span><br><span class="line">       System.<span class="keyword">out</span>.println(b2);</span><br><span class="line">       System.<span class="keyword">out</span>.println(b3);</span><br><span class="line">       System.<span class="keyword">out</span>.println(b4);</span><br><span class="line">       System.<span class="keyword">out</span>.println(b5);</span><br><span class="line">       System.<span class="keyword">out</span>.println(b6);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-字符变量：char（1个字符-2字节）"><a href="#3-字符变量：char（1个字符-2字节）" class="headerlink" title="3. 字符变量：char（1个字符=2字节）"></a>3. 字符变量：char（1个字符=2字节）</h2><ul><li>声明char变量通常使用一对’’，内部只能由一个字符。   <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用的定义，声明一个字符。</span></span><br><span class="line"><span class="keyword">char</span> C1 = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> C2 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> C3 = <span class="string">'中'</span>;</span><br><span class="line"><span class="keyword">char</span> C4 = <span class="string">'1'</span>;</span><br><span class="line">错误示范：</span><br><span class="line"><span class="comment">//char类型只能定义一个字符</span></span><br><span class="line"><span class="keyword">char</span> C5 = <span class="string">'AB'</span></span><br><span class="line"><span class="comment">//转义字符</span></span><br><span class="line"><span class="comment">//实现换行作用</span></span><br><span class="line"><span class="keyword">char</span> C6 = <span class="string">'\n'</span>;</span><br><span class="line">C6 =<span class="string">'\t'</span>;    <span class="comment">//制表符</span></span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="string">"hello"</span>+C5);</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="4-布尔值：Boolean"><a href="#4-布尔值：Boolean" class="headerlink" title="4. 布尔值：Boolean"></a>4. 布尔值：Boolean</h2><ul><li>只能取两个值之一：true、false   <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span>ean bb1 = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bool</span>ean bb2 = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>常用于条件判断、循环结构中<h2 id="基本数据类型之间的运算规则："><a href="#基本数据类型之间的运算规则：" class="headerlink" title="基本数据类型之间的运算规则："></a>基本数据类型之间的运算规则：</h2></li></ul><strong>前提:这里只考虑七种基本数据类型变量的运算，不包含Boolean类型。</strong><h3 id="1-自动类型提升"><a href="#1-自动类型提升" class="headerlink" title="1. 自动类型提升"></a>1. 自动类型提升</h3></li></ul><p>** 当容量小的数据类型变量与容量大的类型数据做运算的时候，结果自动提升为大容量的数据类型。<br>char字符变量也可以做运算，”a”=97;<br>byte、char、short–&gt;int–&gt; long–&gt;float–&gt;double<br><strong>说明：当byte、char、short三种类型的变量做运算时，结果为int型。</strong></p><h3 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2. 强制类型转换"></a>2. 强制类型转换</h3><p><strong>自动提升运算的逆运算，容量大向容量小的转换</strong></p><ul><li>需要使用强转符:()</li><li>强制类型转换可能会导致精度损失。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> d1 = <span class="number">12.9</span>;</span><br><span class="line"><span class="built_in">int</span> i1 = (<span class="built_in">int</span>)d1;</span><br></pre></td></tr></table></figure>输出结果为12，只保留整型（截断操作）。</li><li>long型不加“L”或者“l”，则强制转换为int型，超过int范围则报错。float不加“f”或“F”，直接报错。</li><li>整形常量不定义直接默认为int型<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//报错,int型计算的结果不能保存在<span class="keyword">byte里</span></span><br><span class="line"><span class="keyword">byte </span><span class="keyword">b </span>= <span class="number">12</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">byte </span><span class="keyword">b1 </span>= <span class="keyword">b </span>+ <span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>浮点型常量默认为double型。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//报错，12.3默认为double型</span></span><br><span class="line">byte b = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">float</span> f1 = b + <span class="number">12.3</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="5-String字符串类型"><a href="#5-String字符串类型" class="headerlink" title="5. String字符串类型"></a>5. String字符串类型</h2><ul><li><ol><li>String属于引用数据类型,即字符串，可以和8种变量类型运算；</li></ol></li><li><ol start="2"><li>声明String类型变量时，使用一对:””<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="built_in">s1</span> = <span class="string">"hello world!"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="built_in">s2</span> = <span class="string">"a"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="built_in">s3</span> = <span class="string">""</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>String 可以和8种基本数据类型变量做运算，且运算只是能连接运算：+   ，且运算结果一定为String类型。 <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">number</span> = <span class="number">1001</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">String</span> numbberStr = <span class="string">"学号："</span></span><br><span class="line"><span class="built_in">String</span> info = numberStr + <span class="built_in">number</span><span class="comment">;</span></span><br><span class="line">Boolean b1 = <span class="literal">true</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">String</span> info1 = info + <span class="number">1</span>；</span><br><span class="line">System.out.println(info1)<span class="comment">;</span></span><br><span class="line">//输出结果：学号：<span class="number">1001</span><span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>涉及到优先级的 +号运算<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> c = <span class="string">'a'</span>;<span class="comment">//a:97  A :65</span></span><br><span class="line"><span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(c+ num + <span class="built_in">str</span>);<span class="comment">//107hello</span></span><br><span class="line">System.out.<span class="built_in">println</span>(c+ <span class="built_in">str</span> + num);<span class="comment">//ahello10</span></span><br><span class="line">System.out.<span class="built_in">println</span>(c+ (num + <span class="built_in">str</span>));<span class="comment">//a10hello</span></span><br><span class="line">System.out.<span class="built_in">println</span>((c+ num) + <span class="built_in">str</span>);<span class="comment">//107hello</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="built_in">str</span>+ num + c);<span class="comment">//hello10a</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="变量之进制"><a href="#变量之进制" class="headerlink" title="变量之进制"></a>变量之进制</h2><blockquote><ol><li>二进制：0，1，满2进1，以0b或0B开头 </li><li>十进制：0-9，满10进1.</li><li>八进制：0-7，满8进一，以数字0开头表示。</li><li>十六进制：0-9及A-F，满16进1，以0x或者0X开头表示，且A-F不区分大小写，如：0x21AF + 1 = 0X21B0；</li></ol></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num1 = <span class="number">0b110</span>;</span><br><span class="line"><span class="built_in">int</span> num2 = <span class="number">110</span>;</span><br><span class="line"><span class="built_in">int</span> num3 = <span class="number">0127</span>;</span><br><span class="line"><span class="built_in">int</span> num4 = <span class="number">0x110A</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"num1"</span>+num1);<span class="comment">//num1 = 6</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"num2"</span>+num2);<span class="comment">//num2 = 110</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"num3"</span>+num3);<span class="comment">//num3 = 87</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"num4"</span>+num4);<span class="comment">//num4 = 4362</span></span><br></pre></td></tr></table></figure><ul><li>负数二进制在计算机种的存储状态<br>负数在计算机种以补码的形式存在,<br><img src="/.com//%E8%B4%9F%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="负数二进制"></li><li>如果要在计算机中存入负数，须要根据源码推出补码，存入补码。<h2 id="按照声明的位置分"><a href="#按照声明的位置分" class="headerlink" title="按照声明的位置分"></a>按照声明的位置分</h2>成员变量 vs 局部变量</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java变量 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本语法</title>
      <link href="/2020/03/27/Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/27/Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法知识"><a href="#基本语法知识" class="headerlink" title="基本语法知识"></a>基本语法知识</h1><a id="more"></a><h1 id="一、关键字和保留字"><a href="#一、关键字和保留字" class="headerlink" title="一、关键字和保留字"></a>一、关键字和保留字</h1><p>关键字：<br><img src="/.com//%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="关键字"><br>保留字：<br><img src="/.com//%E4%BF%9D%E7%95%99%E5%AD%97.png" alt="保留字">   </p><h1 id="二、标识符"><a href="#二、标识符" class="headerlink" title="二、标识符"></a>二、标识符</h1><blockquote><p>凡是可以自己命名的都叫标识符</p></blockquote><h2 id="标识符的命名规则（必须遵守）"><a href="#标识符的命名规则（必须遵守）" class="headerlink" title="标识符的命名规则（必须遵守）"></a>标识符的命名规则（必须遵守）</h2><ul><li>由26个英文字母大小写，0-9,或者$组成  </li><li>数字不可以开头。</li><li>不可以使用关键字和保留字，但可以包含关键字和保留字</li><li>Java中严格区分大小写，长度无限制。</li><li>标识符不能包含空格。  <h1 id="java中的名称命名规范（可以不遵守，但影响程序可读性）："><a href="#java中的名称命名规范（可以不遵守，但影响程序可读性）：" class="headerlink" title="java中的名称命名规范（可以不遵守，但影响程序可读性）："></a>java中的名称命名规范（可以不遵守，但影响程序可读性）：</h1></li><li>包名：多单词组成时所有的字母都小写：xxxyyyxzzz；</li><li>类名、接口名：多单词组成时，所有的单词的首字母大写：XxxYyyZzz；</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个首字母单词大写：xxxYYZZZ；</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 关键字 </tag>
            
            <tag> 保留字 </tag>
            
            <tag> 标识符 </tag>
            
            <tag> 命名规则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA第一天</title>
      <link href="/2020/03/27/1/"/>
      <url>/2020/03/27/1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-基础常识篇"><a href="#1-1-基础常识篇" class="headerlink" title="1.1 基础常识篇"></a>1.1 基础常识篇</h1><a id="more"></a><ul><li>软件开发<br>软件，就是一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分</li><li>人机交互方式<blockquote><ol><li>图形化界面  这种方式简单直观，使用者易于接受，容易上手操作。</li><li>命令方式：  需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录一些指令。</li></ol></blockquote></li><li>常用的DOS指令<br><img src="/.com//%E6%8C%87%E4%BB%A4.png" alt="dos指令"><h1 id="1-2-java语言概述"><a href="#1-2-java语言概述" class="headerlink" title="1.2 java语言概述"></a>1.2 java语言概述</h1></li><li>什么是计算机语言<br>人与计算机的交流方式。<br>C,C++,JAVA,pyyhon,PHP等。</li><li>第一代语言： 打孔机</li><li>第二代语言： 汇编</li><li>第三代语言： 现在各种语言C、Pascal、Fprtan、C++、java</li></ul><hr><h1 id="学习JAVA的基础"><a href="#学习JAVA的基础" class="headerlink" title="学习JAVA的基础"></a>学习JAVA的基础</h1><ul><li>java语言的特点是什么？<blockquote><ol><li>面向对象性：两个基本概念：类、对象；三大特性：封装、继承、多态</li><li>健壮性：吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li><li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”</li></ol></blockquote></li><li>问题：System.out.println()和System.out.print()什么区别呢？</li></ul><ol><li>System.out.println();打印结束后会换行。</li><li>System.out.ptint();打印完不会换行</li></ol><ul><li>一个JAVA 源文件中是否可以包括更多个类？有什么限制？<br>答：可以，但是最多只能有一个类名声明为public，与文件名字相同。</li><li>JDK,JRE,JNM 的关系是什么？<br>JDK包含JRE，JRE包含JVM。</li><li>输出：心形<pre><code></code></pre></li></ul><p>public class sweet {</p><pre><code>/** * @param args */public static void main(String[] args) {    // TODO Auto-generated method stub        System.out.print(&quot;\t&quot; + &quot;*&quot; + &quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t&quot; + &quot;\n&quot;);        System.out.print(&quot;*&quot; + &quot;\t\t&quot; + &quot;*&quot; + &quot;\t\t\t\t&quot; + &quot;晚安，傻猪&quot; + &quot;\t\t\t\t&quot; + &quot;*&quot; + &quot;\t\t&quot; + &quot;*&quot; + &quot;\n&quot;);        System.out.print(&quot;\t&quot; + &quot;*&quot; + &quot;\t\t\t\t\t&quot;+&quot;爱你呦&quot;+&quot;\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t&quot; + &quot;*&quot; + &quot;\t\t\t\t\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t\t&quot; + &quot;*&quot; + &quot;\t\t\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t\t\t&quot; + &quot;*&quot; + &quot;\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;&quot; + &quot;\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t\t\t\t&quot; + &quot;*&quot; + &quot;&quot; + &quot;\t\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\t\t&quot; + &quot;*&quot; + &quot;&quot; + &quot;\t\t&quot; + &quot;\n&quot;);        System.out.print(&quot;\t\t\t\t\t\t\t&quot; + &quot;*&quot; + &quot;\n&quot;);    }</code></pre><p>}</p><p>```<br><img src="/.com//%E5%BF%83%E5%BD%A2.png" alt="心形">   </p><hr><hr><h1 id="晚安"><a href="#晚安" class="headerlink" title="晚安"></a>晚安</h1>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入坑</title>
      <link href="/2020/03/27/java%E5%85%A5%E5%9D%91/"/>
      <url>/2020/03/27/java%E5%85%A5%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="入坑java的学习之路"><a href="#入坑java的学习之路" class="headerlink" title="入坑java的学习之路"></a>入坑java的学习之路</h1><a id="more"></a><ul><li>编程语言：java、python、golang、c</li><li>基本算法</li><li>基本的网络知识：tcp/ip  http/https</li><li>基本的设计模式</li></ul><hr><h2 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h2><ul><li>操作系统 linux centos</li><li>代码管理 svn/git</li><li>持续集成 （CI/CD）：jenkins</li></ul><hr><h2 id="JAVASE知识学习"><a href="#JAVASE知识学习" class="headerlink" title="JAVASE知识学习"></a>JAVASE知识学习</h2><ul><li>java发展历程  </li><li>java环境搭建</li><li>基础程序设计   <ul><li>数据类型</li><li>运算符</li><li>流程控制</li><li>数组</li></ul></li><li>应用程序开发  <ul><li>JDBC</li><li>集合</li><li>异常处理</li><li>类库</li><li>多线程</li><li>IO</li><li>反射</li><li>网络</li></ul></li><li>连接Oracle</li><li>java新特性<ul><li>泛型</li><li>枚举</li><li>装箱/拆箱</li><li>可变参数</li><li>Annotation</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 入坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘抄</title>
      <link href="/2020/03/23/%E6%91%98%E6%8A%84/"/>
      <url>/2020/03/23/%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<p>周末愉快</p><h2 id="晚记–男女有哪些思维上的差异？"><a href="#晚记–男女有哪些思维上的差异？" class="headerlink" title="晚记–男女有哪些思维上的差异？"></a>晚记–男女有哪些思维上的差异？</h2><p><img src="/.com//1.jpg" alt="晚安">  </p><a id="more"></a><hr><p>恋爱和婚姻中的爱恨纠葛往往都是因为思维方式的不同，下面我就来细数一下在恋爱中男女那些常见的思维差异（注意：这里说的是大概率，不代表所有，就好像说吸烟有害健康，你非说有人吸烟也活了很久，这里的讨论和区分只是从大部分来看）：  </p><h2 id="1-恋爱中，大部分男生是先热后冷，爱是减分制；大部分女生是先冷后热，爱是加分制。"><a href="#1-恋爱中，大部分男生是先热后冷，爱是减分制；大部分女生是先冷后热，爱是加分制。" class="headerlink" title="1.恋爱中，大部分男生是先热后冷，爱是减分制；大部分女生是先冷后热，爱是加分制。"></a>1.恋爱中，大部分男生是先热后冷，爱是减分制；大部分女生是先冷后热，爱是加分制。</h2><p>在恋爱关系中，相对于男生来讲，女生往往更容易陷入一种不切实际的完美爱情想象中，她们苛求完美，总是有着随时为爱情鞠躬尽瘁的大仁大义，她们付出的越来越多，不自觉地将自己的生活和对方的生活融在一起，更容易失去自我。<br>反观男生的爱情，前期主要以新鲜感为主，逐渐到了后期，他们更注重两人之间的理解和默契，不再愿意将精力和时间过于投入在虚无缥缈的浪漫上，相较女生而言，会更注重问题本质，不做多余的举动，更为理智一些。<br><img src="/.com//2.jpg" alt="你好"></p><hr><h2 id="2-男生将确定关系视作达到目标，女生将确定关系视作新的开始。"><a href="#2-男生将确定关系视作达到目标，女生将确定关系视作新的开始。" class="headerlink" title="2.男生将确定关系视作达到目标，女生将确定关系视作新的开始。"></a>2.男生将确定关系视作达到目标，女生将确定关系视作新的开始。</h2><p>前一阵有一个段子很好地诠释了这个现象。</p><p>问：“为什么男生追到女生之后就懈怠了？”</p><p>答：“谁考完试还看书啊！”</p><p>哈哈一笑的同时，也让很多人陷入了深思。</p><p>一段恋情的开始，在男生看来就像经历了一场考试，试前紧张忐忑，为其做足万全准备，心心念念地期盼着顺利通过考试。</p><p>考试一通过，即得到权威认可了，悬着的一颗心便瞬间落下，将之前挑灯夜读的书籍一股脑儿扔到脑后，完全忘却考试这回事。</p><p>反观女生，在被追求的时候可能心不在焉，也不会轻易对追求者付出真心，处在高位。</p><p>一旦确定关系，她才开始逐渐认真起来，觉得自己成为了别人的“女朋友”，自己也拥有了“男朋友”，二人就必须承担起自己的责任。<br><img src="/.com//3.jpg" alt="钟楼"></p><hr><h2 id="3-男生更在意事态发展方向，女生更在意事态过程细节。"><a href="#3-男生更在意事态发展方向，女生更在意事态过程细节。" class="headerlink" title="3.男生更在意事态发展方向，女生更在意事态过程细节。"></a>3.男生更在意事态发展方向，女生更在意事态过程细节。</h2><p>女生的大脑部分情感区域比较活跃,对数字也很敏感。东西多少钱一斤。今天是几月几号,是什么日子，这些通常都是女生所在乎的重点，自然也会在生活中把这些重点当做“爱人是否在意自己的证据”。</p><p>相比较而言，男生则更在意事态发展的大方向，比如，我跟你在一起是为了结婚，只要我们两个人都是奔着结婚这个目标去的就好，中途细枝末节的一些小事并不能代表什么，更不能定义是否不爱了。<br><img src="/.com//4.jpg" alt="傍晚"></p><hr><h2 id="4-吵架的时候，女生更注重情绪态度，男生更注重如何解决。"><a href="#4-吵架的时候，女生更注重情绪态度，男生更注重如何解决。" class="headerlink" title="4. 吵架的时候，女生更注重情绪态度，男生更注重如何解决。"></a>4. 吵架的时候，女生更注重情绪态度，男生更注重如何解决。</h2><p>当男生遇到问题会冷静分析原因、思考解决办法，女生则是感性动物，往往更在乎情感的认同和内心的感受。</p><p>此差异也可以解释一个日常现象：比起男生，女生更怕疼。</p><p>当男生遇到问题会冷静分析原因、思考解决办法，女生则是感性动物，往往更在乎情感的认同和内心的感受。</p><p>当身体或心理上的疼痛发生时，男生潜意识中的一部分思绪总会想着如何缓解疼痛，而女生则更容易陷在疼痛里无法自拔，纠扯不清。<br><img src="/.com//5.jpg" alt="动漫"></p><hr><h2 id="5-女生遇到真爱的第一反应是勇敢，男生遇到真爱的第一反应是自卑。"><a href="#5-女生遇到真爱的第一反应是勇敢，男生遇到真爱的第一反应是自卑。" class="headerlink" title="5.女生遇到真爱的第一反应是勇敢，男生遇到真爱的第一反应是自卑。"></a>5.女生遇到真爱的第一反应是勇敢，男生遇到真爱的第一反应是自卑。</h2><p>这条生活经验仿佛跟人们的刻板印象有所偏差。</p><p>在我们印象中，柔柔弱弱的女孩子仿佛总是被追求的一方，而血气方刚的男孩子总是主动出击的。</p><p>其实并不全是这样，在很多情况下，如果真的遇到心仪的对象，爱情的萌生总会激起人类内心深处不常示众的另一面。<br><img src="/.com//6.jpeg" alt="壁纸"></p><hr><h2 id="6-很多时候，女生的“撩”总带着走心一面，而男生的“撩”仅为闲得无聊。"><a href="#6-很多时候，女生的“撩”总带着走心一面，而男生的“撩”仅为闲得无聊。" class="headerlink" title="6.很多时候，女生的“撩”总带着走心一面，而男生的“撩”仅为闲得无聊。"></a>6.很多时候，女生的“撩”总带着走心一面，而男生的“撩”仅为闲得无聊。</h2><p>对于完全不感兴趣的人，女生通常是选择不予搭理的。</p><p>而面对同样的处境，很多男生则会留给自己更多的机会和退路，更容易表现出优柔寡断和模棱两可。</p><p>同样，一个能让女生主动“撩拨”的人，一定是存在着某些吸引这个女生的特质。而一个能让男生主动“撩拨”的人，也有可能仅仅是因为男生空虚寂寞冷。</p><p>换言之，他只是为了解决自身需要，根本不在乎“撩”的人是不是你。<br><img src="/.com//8.jpg" alt="动漫"></p><hr><h2 id="7-男生觉得“只要你没说不爱我，你就是爱我的。”，女生则经常会怀疑：“只要你没说爱我，是不是就没有昨天那么爱了？”"><a href="#7-男生觉得“只要你没说不爱我，你就是爱我的。”，女生则经常会怀疑：“只要你没说爱我，是不是就没有昨天那么爱了？”" class="headerlink" title="7.男生觉得“只要你没说不爱我，你就是爱我的。”，女生则经常会怀疑：“只要你没说爱我，是不是就没有昨天那么爱了？”"></a>7.男生觉得“只要你没说不爱我，你就是爱我的。”，女生则经常会怀疑：“只要你没说爱我，是不是就没有昨天那么爱了？”</h2><p>循其本质，其实是女生的潜意识里缺少安全感，像一只等待关怀的小奶猫，总是渴求被抚摸，被关注，以此来寻求存在感。也正因为如此，女生会设身处地地以为男生同自己一样需要被爱的表示，于是常常会付出得更多。</p><p>而比较而言，男生则显得坚定多了，对于女生给予的满满当当的爱，他们总是不加任何怀疑。<br><img src="/.com//9.jpeg" alt="壁纸"></p><hr><h2 id="8-男生更喜欢靠征服来赢得爱情，女生更喜欢能征服自己的男生。"><a href="#8-男生更喜欢靠征服来赢得爱情，女生更喜欢能征服自己的男生。" class="headerlink" title="8.男生更喜欢靠征服来赢得爱情，女生更喜欢能征服自己的男生。"></a>8.男生更喜欢靠征服来赢得爱情，女生更喜欢能征服自己的男生。</h2><p>男生是征服性的动物，这和大自然的进化有关系，你应该没看见过动物世界中，一只雌孔雀去求偶雄性孔雀，或者一只母狮子去追着公狮子交配。</p><p>男生会更喜欢那些自己追求的、辛苦得到的爱情，而女生呢，更喜欢那些能征服自己的男人，而不是自己的跟班。<br><img src="/.com//10.jpg" alt="壁纸"></p><hr><h2 id="9-分手之后，男生比女生更容易后悔。"><a href="#9-分手之后，男生比女生更容易后悔。" class="headerlink" title="9.分手之后，男生比女生更容易后悔。"></a>9.分手之后，男生比女生更容易后悔。</h2><p>男生分手后，其实会经历几个时期，感到自由——寻找新欢失败——空虚寂寞——怀念前任。<br><img src="/.com//11.png" alt="壁纸"></p><hr><h2 id="10-女性发脾气更多是为了赢得安全感，男生发脾气是因为不够喜欢了。"><a href="#10-女性发脾气更多是为了赢得安全感，男生发脾气是因为不够喜欢了。" class="headerlink" title="10.女性发脾气更多是为了赢得安全感，男生发脾气是因为不够喜欢了。"></a>10.女性发脾气更多是为了赢得安全感，男生发脾气是因为不够喜欢了。</h2><p>恋爱中，男女都会发脾气，很多时候，女生会发脾气和作，很多时候是因为没有安全感，靠发脾气的方式赢得男生的付出和关注，从而获得更多安全感，而男生，如果常常对你发脾气，多数是因为对你的喜欢下降了，所以，包容度降低了。<br><img src="/.com//12.jpeg" alt="壁纸"></p><hr><h2 id="11-女生在恋爱中不爱公开关系，很多是不确定男生对自己的爱够不够，男生不愿意公开关系，多数是因为不够喜欢，想随时脱身。"><a href="#11-女生在恋爱中不爱公开关系，很多是不确定男生对自己的爱够不够，男生不愿意公开关系，多数是因为不够喜欢，想随时脱身。" class="headerlink" title="11.女生在恋爱中不爱公开关系，很多是不确定男生对自己的爱够不够，男生不愿意公开关系，多数是因为不够喜欢，想随时脱身。"></a>11.女生在恋爱中不爱公开关系，很多是不确定男生对自己的爱够不够，男生不愿意公开关系，多数是因为不够喜欢，想随时脱身。</h2><p>咨询中，我很多时候会发现很多男生不愿意发女友的朋友圈，这除了和个人的习惯有关系，其实也看得出男生是不是足够地爱你，而女生不愿意公开男性，往往也是感受不到男生足够的喜欢，所以男生和女生不公开关系，往往结果相同，但原因不同。<br><img src="/.com//7.jpeg" alt="壁纸"></p><hr><h2 id="12-女生以为男生是爱上了你，可能男生仅仅是想上你。"><a href="#12-女生以为男生是爱上了你，可能男生仅仅是想上你。" class="headerlink" title="12.女生以为男生是爱上了你，可能男生仅仅是想上你。"></a>12.女生以为男生是爱上了你，可能男生仅仅是想上你。</h2><p>很多时候，女生在面对一个男生的热烈追求的时候，其实很难区分对方到底是真心实意地想和你好好在一起呢，还是仅仅别有目的地玩玩上床呢，很难区分。</p><p>因为这两者，在男生追求女生阶段有很多类似的地方，比如男生都会很积极，都会殷勤，都会找你聊天，约会见面，甚至都会表现得喜欢你。</p><p>对于很多姑娘最大的问题是：不会区分他到底是“爱”上了你（fall in love with u）还是“爱上”你（want to f**k u）。</p><p>而区分这个我想对于更多姑娘才是更重要的事情。<br><img src="/.com//13.jpeg" alt="壁纸"></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第二篇博客</title>
      <link href="/2020/03/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/03/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-1/"/>
      <url>/2020/03/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="2019年3月21"><a href="#2019年3月21" class="headerlink" title="2019年3月21"></a>2019年3月21</h1><p><img src="/.com//thumb-1920-280633.jpg" alt="晚安"></p><a id="more"></a><h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><h2 id="很疲惫地一天"><a href="#很疲惫地一天" class="headerlink" title="很疲惫地一天"></a>很疲惫地一天</h2><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>hexo创建以及主题的使用很复杂，花了两天的时间终于做了个大概。<br>以后慢慢完善吧，加油 坚持做下！</p><hr><h2 id="区块以用，不知道什么东西，测试一下"><a href="#区块以用，不知道什么东西，测试一下" class="headerlink" title="区块以用，不知道什么东西，测试一下."></a>区块以用，不知道什么东西，测试一下.</h2><blockquote><p>大眠 - 王心凌 (Cyndi Wang)<br>词：施人诚<br>曲：张简君伟<br>感谢他把我 当成傻子<br>每天都哄我 上当一次<br>清醒一辈子 也就那样子<br>不介意用爱 来醉生梦死<br>原来被催眠 真有意思<br>我乐于作个 敬业人质<br>没空再去对谁解释<br>是我自己把自己挟持<br>不关他的事<br>都快忘了怎样恋一个爱<br>我被虚度了的青春<br>也许还能活过来<br>说心疼我的更应该明白<br>我当然会沉醉个痛快<br>就让我陪他恋完这场爱<br>只求心花终于盛开<br>就没有别的期待<br>等梦完醒来 再去收拾残骸<br>原来被催眠 真有意思<br>我乐于作个 敬业人质<br>没空再去对谁解释<br>是我自己把自己挟持<br>不关他的事<br>都快忘了怎样恋一个爱<br>我被虚度了的青春<br>也许还能活过来<br>说心疼我的更应该明白<br>我当然会沉醉个痛快<br>就让我陪他恋完这场爱<br>只求心花终于盛开<br>就没有别的期待<br>等梦完醒来 再去收拾残骸<br>如果不失去理智<br>爱情要从何开始<br>傻傻的骗子<br>和骗人的傻子<br>才可能一生一世<br>都快忘了怎样恋一个爱<br>我被虚度了的青春<br>也许还能活过来<br>说心疼我的更应该明白<br>我当然会沉醉个痛快<br>就让我陪他恋完这场爱<br>只求心花终于盛开<br>就没有别的期待<br>等梦完醒来<br>再去收拾残骸  </p></blockquote><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></h2><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="/.com//1000315549.jpeg" alt="图片"><br><img src="/.com//1000315554.jpeg" alt="图片"><br><img src="/.com//1000637306.jpeg" alt="图片"></p><hr><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>这儿是第一行</li><li>这儿是第二行</li><li>这儿是第三行</li></ul><hr><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>这是有序列表的第一行</li><li>这是有序列表的第二行</li><li>这是有序列表的第三行 <h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2></li><li>列表项1  <ol><li>嵌套列表1</li><li>嵌套列表2</li><li>桥套列表3</li></ol></li><li>列表项2<ul><li>无序的嵌套<ul><li>首行可以缩进四个空格</li><li>嵌套可以有多层</li></ul></li><li>无序2<ul><li>子列表11111111<ul><li>孙列表222222<ul><li>重孙列表33</li></ul></li></ul></li></ul></li></ul></li></ol><hr><h2 id="强调或突出"><a href="#强调或突出" class="headerlink" title="强调或突出"></a>强调或突出</h2><p><strong>这是重点</strong><br><em>突出</em></p><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><hr><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>这是代码块1<br> <code>if (a==b){b==a;}</code><br>这是代码块2  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; pageEncoding&#x3D;&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path &#x3D; request.getContextPath();</span><br><span class="line">String basePath &#x3D; request.getScheme()+&quot;:&#x2F;&#x2F;&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;&#x2F;&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;CN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href&#x3D;&quot;&lt;%&#x3D;basePath%&gt;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP &#39;index.jsp&#39; starting page&lt;&#x2F;title&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;pragma&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;cache-control&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;0&quot;&gt;    </span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;keywords&quot; content&#x3D;&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;description&quot; content&#x3D;&quot;This is my page&quot;&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;styles.css&quot;&gt;</span><br><span class="line">--&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">    </span><br><span class="line">         &lt;body bgcolor&#x3D;&quot;pink&quot;&gt;</span><br><span class="line">         &lt;input type&#x3D;&quot;text&quot; align&#x3D;&quot;top&quot;width&#x3D;&quot;30&quot;height&#x3D;&quot;8&quot;value&#x3D;&quot;-请输入需要查找的内容-&quot;&gt;&lt;input type&#x3D;&quot;button&quot;value&#x3D;&quot;搜索&quot;&gt;&lt;br&gt;</span><br><span class="line">         &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;baidu.com&quot;target&#x3D;&quot;w&quot;&gt;</span><br><span class="line">         &lt;img border&#x3D;&quot;0&quot; src&#x3D;&quot;bd.png&quot;width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;border&#x3D;&quot;1&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">         &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;baidu.com&quot; target&#x3D;&quot;w&quot;&gt; </span><br><span class="line">         &lt;font color&#x3D;&quot;green&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;黑体&quot;&gt;百度一下，你就知道&lt;&#x2F;font&gt;&lt;br&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt; &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;bilibili.com&quot;target&#x3D;&quot;w&quot;&gt;&lt;img src&#x3D;&quot;bl.png&quot;width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;border&#x3D;&quot;1&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">         &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;bilibili.com&quot; target&#x3D;&quot;w&quot;&gt;</span><br><span class="line">         &lt;font color&#x3D;&quot;green&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;黑体&quot;&gt;哔哩哔哩- （ ゜- ゜）つロ 乾杯~ - bilibili&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;jingdong.com&quot; target&#x3D;&quot;w&quot;&gt;&lt;img src&#x3D;&quot;jd.png&quot; width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;&gt;</span><br><span class="line">        &lt;font color&#x3D;&quot;black&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;宋体&quot;&gt; 京东，多快好省，只为品质生活&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;taobao.com&quot; target&#x3D;&quot;w&quot;&gt;&lt;img src&#x3D;&quot;tb.png&quot; width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;&gt;</span><br><span class="line">        &lt;font color&#x3D;&quot;blue&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;宋体&quot;&gt; 淘宝，尽在淘宝&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;suningyigou.com&quot; target&#x3D;&quot;w&quot;&gt;&lt;img src&#x3D;&quot;sn.png&quot; width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;&gt;</span><br><span class="line">        &lt;font color&#x3D;&quot;red&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;宋体&quot;&gt; 苏宁，超值正品，全国联保&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;tmall.com&quot; target&#x3D;&quot;w&quot;&gt;&lt;img src&#x3D;&quot;tm.png&quot; width&#x3D;&quot;80&quot;height&#x3D;&quot;40&quot;&gt;</span><br><span class="line">        &lt;font color&#x3D;&quot;green&quot;size&#x3D;&quot;7&quot;face&#x3D;&quot;宋体&quot;&gt; 天猫,引领更好的生活&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;Users&#x2F;li&#x2F;Desktop&#x2F;%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3%20(2).html&quot;&gt;ben&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">         &lt;&#x2F;ul&gt; </span><br><span class="line">         &lt;button onclick&#x3D;&quot;alert(&#39;请在其他浏览器搜索&#39;)&quot;&gt;&lt;font color&#x3D;&quot;green&quot;size&#x3D;&quot;4&quot;face&#x3D;”微软雅黑“&gt;如果打不开，请点击这里&lt;&#x2F;font&gt;&lt;&#x2F;button&gt;&lt;br&gt;</span><br><span class="line">         &lt;iframe src&#x3D;&quot;1.jpg&quot;width&#x3D;&quot;800&quot;height&#x3D;&quot;1000&quot;name&#x3D;&quot;w&quot;&gt;</span><br><span class="line"> &lt;&#x2F;iframe&gt;             </span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="支持HTML"><a href="#支持HTML" class="headerlink" title="支持HTML"></a>支持HTML</h1><h1>适用于html的语法<h1><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html>  <head>    <base href="<%=basePath%>">    <meta http-equiv="pragma" content="no-cache">    <meta http-equiv="cache-control" content="no-cache">    <meta http-equiv="expires" content="0">        <meta http-equiv="keywords" content="keyword1,keyword2,keyword3">    <meta http-equiv="description" content="This is my page">    <!--    <link rel="stylesheet" type="text/css" href="styles.css">    -->    <link rel="stylesheet" type="text/css" href="li3_10.css">        <script type="text/javascript">                function onclickfun(){                alert("重置成功！") ;                }                </script><style>    #id001{    color:red;    font-size:20px;    text-align:center;    }    #id002{    color:pink;    font-size:20px;    text-align:center;    }        #id003{    color:red;    font-size:30px;    text-align:center;    }    </style>  <meta name="generator" content="Hexo 4.2.0"></head>  <body><form action="deal.jsp" method="post">    <div id="id003">用户信息</div>          <table align="center">                <tr>            <td>姓名：</td>            <td><input type="text" size="30" name="username"></td>        </tr>            <tr>            <td>学号：</td>            <td><input type="text" size="30" name="userxuehao"></td>        </tr>        <tr>            <td>国籍：</td>            <td><select name="userguoji">                <option selected="selected">-请选择国籍-</option>                <option>中国</option>                <option>日本</option>                <option>韩国</option>                </select></td>        </tr>        <tr>            <td>身份证号：</td>            <td><input type="text" size="30" name="idnumber"></td>        </tr>        <tr>            <td>学院：</td>            <td><select name="userxueyuan">                    <option selceted="selected">-请选择学院-</option>                    <option>智能制造学院</option>                    <option>马克思主义学院</option>                    <option>音乐学院</option>                    <option>信息工程学院</option>                    <option>体育学院</option>               </select> </td>        </tr>        <tr>            <td>年级：</td>            <td><select name="usernianji">                    <option selected="selected">-请选择你的年级-</option>                    <option>大一</option>                    <option>大二</option>                    <option>大三</option>                    <option>大四</option>                </select></td>        </tr>    </table><h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp试卷</h1>                      <!-- 试卷内容 --><table align="center">            <tr>             <td>一、选择题：请下面几个小题中选择正确答案（每道题只有一个正确答案)<br>            1：世界上最大的动物是（每题5分）<br>            <input type="radio" name="1.1" value="A">A 蚂蚁            <input type="radio" name="1.1" value="B">B大象            <input type="radio" name="1.1" value="C">C 蓝鲸</td>        </tr>        <tr>            <td>2：1+1+1+1=  <br>            <input type="radio" name="1.2" value="A">A 40            <input type="radio" name="1.2" value="B">B 4</td>        </tr>        <tr>            <td>3：我最喜欢上哪门课？<br>            <input type="radio" name="1.3" value="A">A 编程实践            <input type="radio" name="1.3" value="B">B 其他课</td>        </tr>         <tr>            <td>二、多选题：下面每道题都有多个选项（每题5分）<br>            1.下列属于动物的是：            <input type="checkbox" name="2.1" value="A">A 猴子<input type="checkbox" name="2.1" value="B">B 羊<input type="checkbox" name="2.1" value="C">C 驴            <input type="checkbox" name="2.1" value="D">D 香蕉</td>        </tr>         <tr>            <td>2.在疫情期间我们应该：            <input type="checkbox" name="2.2" value="A">A 好好学习<input type="checkbox" name="2.2" value="B">B 服从领导安排<input type="checkbox" name="2.2" value="C">C 在家打游戏            <input type="checkbox" name="2.2" value="D">D 和同学们疯狂聚会</td>        </tr>        <tr>             <td>三、填空题：请在空中填入正确答案（每题5分）<br>            1、梅西在哪支俱乐部效力：            <input type="text" name="3.1"></td>        </tr>        <tr>            <td>2、C罗在哪支球队效力：            <input type="text" name="3.2"></td>        </tr>            <tr>     </tr><tr>    <td align="left">    <input type="reset" value="重置" name="tj">    </td>         <td align="left">           <input type="submit" value="提交" name="tj">    </td>    </tr>       </table>                                                                                                                  <div id="id002">请认真作答！！</div>    <div id="id001">请勿作弊！！！</div>    </form>       <table>    </table>  <script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"live2d-widget-model-koharu"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></html> <hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th align="center">姓名</th><th align="center">年龄</th><th align="center">班级</th><th align="center">性别</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center">18</td><td align="center">九年级</td><td align="center">男</td></tr><tr><td align="center">小张</td><td align="center">19</td><td align="center">六年级</td><td align="center">男</td></tr><tr><td align="center">小红</td><td align="center">13</td><td align="center">六年级</td><td align="center">女</td></tr></tbody></table><br><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><div bgcolor="green">谢谢观看<div>   --------*****</div></div></h1></h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
